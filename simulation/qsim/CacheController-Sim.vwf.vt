// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/20/2016 01:55:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CacheController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CacheController_vlg_sample_tst(
	address_block_in,
	addressIN,
	clock,
	data_block_in,
	data_in,
	MreIn,
	MweIn,
	replaceStatusIn,
	reset,
	sampler_tx
);
input [11:0] address_block_in;
input [11:0] addressIN;
input  clock;
input [63:0] data_block_in;
input [15:0] data_in;
input  MreIn;
input  MweIn;
input  replaceStatusIn;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(address_block_in or addressIN or clock or data_block_in or data_in or MreIn or MweIn or replaceStatusIn or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CacheController_vlg_check_tst (
	addressOUT,
	blockReplaced_d,
	data_enable_d,
	data_out_cpu,
	delayReq,
	hit_d,
	lineIndex_d,
	read_data_d,
	read_tag_d,
	replaceStatusOut,
	tag_enable_d,
	tagIndex_d,
	tempDataIn_d,
	tempDataOut_d,
	wordIndex_d,
	write_block_d,
	write_data_d,
	write_tag_d,
	sampler_rx
);
input [11:0] addressOUT;
input  blockReplaced_d;
input  data_enable_d;
input [15:0] data_out_cpu;
input  delayReq;
input  hit_d;
input [2:0] lineIndex_d;
input  read_data_d;
input  read_tag_d;
input  replaceStatusOut;
input  tag_enable_d;
input [6:0] tagIndex_d;
input [15:0] tempDataIn_d;
input [15:0] tempDataOut_d;
input [1:0] wordIndex_d;
input  write_block_d;
input  write_data_d;
input  write_tag_d;
input sampler_rx;

reg [11:0] addressOUT_expected;
reg  blockReplaced_d_expected;
reg  data_enable_d_expected;
reg [15:0] data_out_cpu_expected;
reg  delayReq_expected;
reg  hit_d_expected;
reg [2:0] lineIndex_d_expected;
reg  read_data_d_expected;
reg  read_tag_d_expected;
reg  replaceStatusOut_expected;
reg  tag_enable_d_expected;
reg [6:0] tagIndex_d_expected;
reg [15:0] tempDataIn_d_expected;
reg [15:0] tempDataOut_d_expected;
reg [1:0] wordIndex_d_expected;
reg  write_block_d_expected;
reg  write_data_d_expected;
reg  write_tag_d_expected;

reg [11:0] addressOUT_prev;
reg  blockReplaced_d_prev;
reg  data_enable_d_prev;
reg [15:0] data_out_cpu_prev;
reg  delayReq_prev;
reg  hit_d_prev;
reg [2:0] lineIndex_d_prev;
reg  read_data_d_prev;
reg  read_tag_d_prev;
reg  replaceStatusOut_prev;
reg  tag_enable_d_prev;
reg [6:0] tagIndex_d_prev;
reg [15:0] tempDataIn_d_prev;
reg [15:0] tempDataOut_d_prev;
reg [1:0] wordIndex_d_prev;
reg  write_block_d_prev;
reg  write_data_d_prev;
reg  write_tag_d_prev;

reg [11:0] addressOUT_expected_prev;
reg  blockReplaced_d_expected_prev;
reg  data_enable_d_expected_prev;
reg [15:0] data_out_cpu_expected_prev;
reg  delayReq_expected_prev;
reg  hit_d_expected_prev;
reg [2:0] lineIndex_d_expected_prev;
reg  read_data_d_expected_prev;
reg  read_tag_d_expected_prev;
reg  replaceStatusOut_expected_prev;
reg  tag_enable_d_expected_prev;
reg [6:0] tagIndex_d_expected_prev;
reg [15:0] tempDataIn_d_expected_prev;
reg [15:0] tempDataOut_d_expected_prev;
reg [1:0] wordIndex_d_expected_prev;
reg  write_block_d_expected_prev;
reg  write_data_d_expected_prev;
reg  write_tag_d_expected_prev;

reg [11:0] last_addressOUT_exp;
reg  last_blockReplaced_d_exp;
reg  last_data_enable_d_exp;
reg [15:0] last_data_out_cpu_exp;
reg  last_delayReq_exp;
reg  last_hit_d_exp;
reg [2:0] last_lineIndex_d_exp;
reg  last_read_data_d_exp;
reg  last_read_tag_d_exp;
reg  last_replaceStatusOut_exp;
reg  last_tag_enable_d_exp;
reg [6:0] last_tagIndex_d_exp;
reg [15:0] last_tempDataIn_d_exp;
reg [15:0] last_tempDataOut_d_exp;
reg [1:0] last_wordIndex_d_exp;
reg  last_write_block_d_exp;
reg  last_write_data_d_exp;
reg  last_write_tag_d_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	addressOUT_prev = addressOUT;
	blockReplaced_d_prev = blockReplaced_d;
	data_enable_d_prev = data_enable_d;
	data_out_cpu_prev = data_out_cpu;
	delayReq_prev = delayReq;
	hit_d_prev = hit_d;
	lineIndex_d_prev = lineIndex_d;
	read_data_d_prev = read_data_d;
	read_tag_d_prev = read_tag_d;
	replaceStatusOut_prev = replaceStatusOut;
	tag_enable_d_prev = tag_enable_d;
	tagIndex_d_prev = tagIndex_d;
	tempDataIn_d_prev = tempDataIn_d;
	tempDataOut_d_prev = tempDataOut_d;
	wordIndex_d_prev = wordIndex_d;
	write_block_d_prev = write_block_d;
	write_data_d_prev = write_data_d;
	write_tag_d_prev = write_tag_d;
end

// update expected /o prevs

always @(trigger)
begin
	addressOUT_expected_prev = addressOUT_expected;
	blockReplaced_d_expected_prev = blockReplaced_d_expected;
	data_enable_d_expected_prev = data_enable_d_expected;
	data_out_cpu_expected_prev = data_out_cpu_expected;
	delayReq_expected_prev = delayReq_expected;
	hit_d_expected_prev = hit_d_expected;
	lineIndex_d_expected_prev = lineIndex_d_expected;
	read_data_d_expected_prev = read_data_d_expected;
	read_tag_d_expected_prev = read_tag_d_expected;
	replaceStatusOut_expected_prev = replaceStatusOut_expected;
	tag_enable_d_expected_prev = tag_enable_d_expected;
	tagIndex_d_expected_prev = tagIndex_d_expected;
	tempDataIn_d_expected_prev = tempDataIn_d_expected;
	tempDataOut_d_expected_prev = tempDataOut_d_expected;
	wordIndex_d_expected_prev = wordIndex_d_expected;
	write_block_d_expected_prev = write_block_d_expected;
	write_data_d_expected_prev = write_data_d_expected;
	write_tag_d_expected_prev = write_tag_d_expected;
end


// expected addressOUT[ 11 ]
initial
begin
	addressOUT_expected[11] = 1'bX;
end 
// expected addressOUT[ 10 ]
initial
begin
	addressOUT_expected[10] = 1'bX;
end 
// expected addressOUT[ 9 ]
initial
begin
	addressOUT_expected[9] = 1'bX;
end 
// expected addressOUT[ 8 ]
initial
begin
	addressOUT_expected[8] = 1'bX;
end 
// expected addressOUT[ 7 ]
initial
begin
	addressOUT_expected[7] = 1'bX;
end 
// expected addressOUT[ 6 ]
initial
begin
	addressOUT_expected[6] = 1'bX;
end 
// expected addressOUT[ 5 ]
initial
begin
	addressOUT_expected[5] = 1'bX;
end 
// expected addressOUT[ 4 ]
initial
begin
	addressOUT_expected[4] = 1'bX;
end 
// expected addressOUT[ 3 ]
initial
begin
	addressOUT_expected[3] = 1'bX;
end 
// expected addressOUT[ 2 ]
initial
begin
	addressOUT_expected[2] = 1'bX;
end 
// expected addressOUT[ 1 ]
initial
begin
	addressOUT_expected[1] = 1'bX;
end 
// expected addressOUT[ 0 ]
initial
begin
	addressOUT_expected[0] = 1'bX;
end 
// expected data_out_cpu[ 15 ]
initial
begin
	data_out_cpu_expected[15] = 1'bX;
end 
// expected data_out_cpu[ 14 ]
initial
begin
	data_out_cpu_expected[14] = 1'bX;
end 
// expected data_out_cpu[ 13 ]
initial
begin
	data_out_cpu_expected[13] = 1'bX;
end 
// expected data_out_cpu[ 12 ]
initial
begin
	data_out_cpu_expected[12] = 1'bX;
end 
// expected data_out_cpu[ 11 ]
initial
begin
	data_out_cpu_expected[11] = 1'bX;
end 
// expected data_out_cpu[ 10 ]
initial
begin
	data_out_cpu_expected[10] = 1'bX;
end 
// expected data_out_cpu[ 9 ]
initial
begin
	data_out_cpu_expected[9] = 1'bX;
end 
// expected data_out_cpu[ 8 ]
initial
begin
	data_out_cpu_expected[8] = 1'bX;
end 
// expected data_out_cpu[ 7 ]
initial
begin
	data_out_cpu_expected[7] = 1'bX;
end 
// expected data_out_cpu[ 6 ]
initial
begin
	data_out_cpu_expected[6] = 1'bX;
end 
// expected data_out_cpu[ 5 ]
initial
begin
	data_out_cpu_expected[5] = 1'bX;
end 
// expected data_out_cpu[ 4 ]
initial
begin
	data_out_cpu_expected[4] = 1'bX;
end 
// expected data_out_cpu[ 3 ]
initial
begin
	data_out_cpu_expected[3] = 1'bX;
end 
// expected data_out_cpu[ 2 ]
initial
begin
	data_out_cpu_expected[2] = 1'bX;
end 
// expected data_out_cpu[ 1 ]
initial
begin
	data_out_cpu_expected[1] = 1'bX;
end 
// expected data_out_cpu[ 0 ]
initial
begin
	data_out_cpu_expected[0] = 1'bX;
end 

// expected delayReq
initial
begin
	delayReq_expected = 1'bX;
end 

// expected replaceStatusOut
initial
begin
	replaceStatusOut_expected = 1'bX;
end 

// expected blockReplaced_d
initial
begin
	blockReplaced_d_expected = 1'bX;
end 

// expected data_enable_d
initial
begin
	data_enable_d_expected = 1'bX;
end 

// expected hit_d
initial
begin
	hit_d_expected = 1'bX;
end 
// expected lineIndex_d[ 2 ]
initial
begin
	lineIndex_d_expected[2] = 1'bX;
end 
// expected lineIndex_d[ 1 ]
initial
begin
	lineIndex_d_expected[1] = 1'bX;
end 
// expected lineIndex_d[ 0 ]
initial
begin
	lineIndex_d_expected[0] = 1'bX;
end 

// expected read_data_d
initial
begin
	read_data_d_expected = 1'bX;
end 

// expected read_tag_d
initial
begin
	read_tag_d_expected = 1'bX;
end 

// expected tag_enable_d
initial
begin
	tag_enable_d_expected = 1'bX;
end 
// expected tagIndex_d[ 6 ]
initial
begin
	tagIndex_d_expected[6] = 1'bX;
end 
// expected tagIndex_d[ 5 ]
initial
begin
	tagIndex_d_expected[5] = 1'bX;
end 
// expected tagIndex_d[ 4 ]
initial
begin
	tagIndex_d_expected[4] = 1'bX;
end 
// expected tagIndex_d[ 3 ]
initial
begin
	tagIndex_d_expected[3] = 1'bX;
end 
// expected tagIndex_d[ 2 ]
initial
begin
	tagIndex_d_expected[2] = 1'bX;
end 
// expected tagIndex_d[ 1 ]
initial
begin
	tagIndex_d_expected[1] = 1'bX;
end 
// expected tagIndex_d[ 0 ]
initial
begin
	tagIndex_d_expected[0] = 1'bX;
end 
// expected tempDataIn_d[ 15 ]
initial
begin
	tempDataIn_d_expected[15] = 1'bX;
end 
// expected tempDataIn_d[ 14 ]
initial
begin
	tempDataIn_d_expected[14] = 1'bX;
end 
// expected tempDataIn_d[ 13 ]
initial
begin
	tempDataIn_d_expected[13] = 1'bX;
end 
// expected tempDataIn_d[ 12 ]
initial
begin
	tempDataIn_d_expected[12] = 1'bX;
end 
// expected tempDataIn_d[ 11 ]
initial
begin
	tempDataIn_d_expected[11] = 1'bX;
end 
// expected tempDataIn_d[ 10 ]
initial
begin
	tempDataIn_d_expected[10] = 1'bX;
end 
// expected tempDataIn_d[ 9 ]
initial
begin
	tempDataIn_d_expected[9] = 1'bX;
end 
// expected tempDataIn_d[ 8 ]
initial
begin
	tempDataIn_d_expected[8] = 1'bX;
end 
// expected tempDataIn_d[ 7 ]
initial
begin
	tempDataIn_d_expected[7] = 1'bX;
end 
// expected tempDataIn_d[ 6 ]
initial
begin
	tempDataIn_d_expected[6] = 1'bX;
end 
// expected tempDataIn_d[ 5 ]
initial
begin
	tempDataIn_d_expected[5] = 1'bX;
end 
// expected tempDataIn_d[ 4 ]
initial
begin
	tempDataIn_d_expected[4] = 1'bX;
end 
// expected tempDataIn_d[ 3 ]
initial
begin
	tempDataIn_d_expected[3] = 1'bX;
end 
// expected tempDataIn_d[ 2 ]
initial
begin
	tempDataIn_d_expected[2] = 1'bX;
end 
// expected tempDataIn_d[ 1 ]
initial
begin
	tempDataIn_d_expected[1] = 1'bX;
end 
// expected tempDataIn_d[ 0 ]
initial
begin
	tempDataIn_d_expected[0] = 1'bX;
end 
// expected tempDataOut_d[ 15 ]
initial
begin
	tempDataOut_d_expected[15] = 1'bX;
end 
// expected tempDataOut_d[ 14 ]
initial
begin
	tempDataOut_d_expected[14] = 1'bX;
end 
// expected tempDataOut_d[ 13 ]
initial
begin
	tempDataOut_d_expected[13] = 1'bX;
end 
// expected tempDataOut_d[ 12 ]
initial
begin
	tempDataOut_d_expected[12] = 1'bX;
end 
// expected tempDataOut_d[ 11 ]
initial
begin
	tempDataOut_d_expected[11] = 1'bX;
end 
// expected tempDataOut_d[ 10 ]
initial
begin
	tempDataOut_d_expected[10] = 1'bX;
end 
// expected tempDataOut_d[ 9 ]
initial
begin
	tempDataOut_d_expected[9] = 1'bX;
end 
// expected tempDataOut_d[ 8 ]
initial
begin
	tempDataOut_d_expected[8] = 1'bX;
end 
// expected tempDataOut_d[ 7 ]
initial
begin
	tempDataOut_d_expected[7] = 1'bX;
end 
// expected tempDataOut_d[ 6 ]
initial
begin
	tempDataOut_d_expected[6] = 1'bX;
end 
// expected tempDataOut_d[ 5 ]
initial
begin
	tempDataOut_d_expected[5] = 1'bX;
end 
// expected tempDataOut_d[ 4 ]
initial
begin
	tempDataOut_d_expected[4] = 1'bX;
end 
// expected tempDataOut_d[ 3 ]
initial
begin
	tempDataOut_d_expected[3] = 1'bX;
end 
// expected tempDataOut_d[ 2 ]
initial
begin
	tempDataOut_d_expected[2] = 1'bX;
end 
// expected tempDataOut_d[ 1 ]
initial
begin
	tempDataOut_d_expected[1] = 1'bX;
end 
// expected tempDataOut_d[ 0 ]
initial
begin
	tempDataOut_d_expected[0] = 1'bX;
end 
// expected wordIndex_d[ 1 ]
initial
begin
	wordIndex_d_expected[1] = 1'bX;
end 
// expected wordIndex_d[ 0 ]
initial
begin
	wordIndex_d_expected[0] = 1'bX;
end 

// expected write_block_d
initial
begin
	write_block_d_expected = 1'bX;
end 

// expected write_data_d
initial
begin
	write_data_d_expected = 1'bX;
end 

// expected write_tag_d
initial
begin
	write_tag_d_expected = 1'bX;
end 
// generate trigger
always @(addressOUT_expected or addressOUT or blockReplaced_d_expected or blockReplaced_d or data_enable_d_expected or data_enable_d or data_out_cpu_expected or data_out_cpu or delayReq_expected or delayReq or hit_d_expected or hit_d or lineIndex_d_expected or lineIndex_d or read_data_d_expected or read_data_d or read_tag_d_expected or read_tag_d or replaceStatusOut_expected or replaceStatusOut or tag_enable_d_expected or tag_enable_d or tagIndex_d_expected or tagIndex_d or tempDataIn_d_expected or tempDataIn_d or tempDataOut_d_expected or tempDataOut_d or wordIndex_d_expected or wordIndex_d or write_block_d_expected or write_block_d or write_data_d_expected or write_data_d or write_tag_d_expected or write_tag_d)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addressOUT = %b | expected blockReplaced_d = %b | expected data_enable_d = %b | expected data_out_cpu = %b | expected delayReq = %b | expected hit_d = %b | expected lineIndex_d = %b | expected read_data_d = %b | expected read_tag_d = %b | expected replaceStatusOut = %b | expected tag_enable_d = %b | expected tagIndex_d = %b | expected tempDataIn_d = %b | expected tempDataOut_d = %b | expected wordIndex_d = %b | expected write_block_d = %b | expected write_data_d = %b | expected write_tag_d = %b | ",addressOUT_expected_prev,blockReplaced_d_expected_prev,data_enable_d_expected_prev,data_out_cpu_expected_prev,delayReq_expected_prev,hit_d_expected_prev,lineIndex_d_expected_prev,read_data_d_expected_prev,read_tag_d_expected_prev,replaceStatusOut_expected_prev,tag_enable_d_expected_prev,tagIndex_d_expected_prev,tempDataIn_d_expected_prev,tempDataOut_d_expected_prev,wordIndex_d_expected_prev,write_block_d_expected_prev,write_data_d_expected_prev,write_tag_d_expected_prev);
	$display("| real addressOUT = %b | real blockReplaced_d = %b | real data_enable_d = %b | real data_out_cpu = %b | real delayReq = %b | real hit_d = %b | real lineIndex_d = %b | real read_data_d = %b | real read_tag_d = %b | real replaceStatusOut = %b | real tag_enable_d = %b | real tagIndex_d = %b | real tempDataIn_d = %b | real tempDataOut_d = %b | real wordIndex_d = %b | real write_block_d = %b | real write_data_d = %b | real write_tag_d = %b | ",addressOUT_prev,blockReplaced_d_prev,data_enable_d_prev,data_out_cpu_prev,delayReq_prev,hit_d_prev,lineIndex_d_prev,read_data_d_prev,read_tag_d_prev,replaceStatusOut_prev,tag_enable_d_prev,tagIndex_d_prev,tempDataIn_d_prev,tempDataOut_d_prev,wordIndex_d_prev,write_block_d_prev,write_data_d_prev,write_tag_d_prev);
`endif
	if (
		( addressOUT_expected_prev[0] !== 1'bx ) && ( addressOUT_prev[0] !== addressOUT_expected_prev[0] )
		&& ((addressOUT_expected_prev[0] !== last_addressOUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[0] = addressOUT_expected_prev[0];
	end
	if (
		( addressOUT_expected_prev[1] !== 1'bx ) && ( addressOUT_prev[1] !== addressOUT_expected_prev[1] )
		&& ((addressOUT_expected_prev[1] !== last_addressOUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[1] = addressOUT_expected_prev[1];
	end
	if (
		( addressOUT_expected_prev[2] !== 1'bx ) && ( addressOUT_prev[2] !== addressOUT_expected_prev[2] )
		&& ((addressOUT_expected_prev[2] !== last_addressOUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[2] = addressOUT_expected_prev[2];
	end
	if (
		( addressOUT_expected_prev[3] !== 1'bx ) && ( addressOUT_prev[3] !== addressOUT_expected_prev[3] )
		&& ((addressOUT_expected_prev[3] !== last_addressOUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[3] = addressOUT_expected_prev[3];
	end
	if (
		( addressOUT_expected_prev[4] !== 1'bx ) && ( addressOUT_prev[4] !== addressOUT_expected_prev[4] )
		&& ((addressOUT_expected_prev[4] !== last_addressOUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[4] = addressOUT_expected_prev[4];
	end
	if (
		( addressOUT_expected_prev[5] !== 1'bx ) && ( addressOUT_prev[5] !== addressOUT_expected_prev[5] )
		&& ((addressOUT_expected_prev[5] !== last_addressOUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[5] = addressOUT_expected_prev[5];
	end
	if (
		( addressOUT_expected_prev[6] !== 1'bx ) && ( addressOUT_prev[6] !== addressOUT_expected_prev[6] )
		&& ((addressOUT_expected_prev[6] !== last_addressOUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[6] = addressOUT_expected_prev[6];
	end
	if (
		( addressOUT_expected_prev[7] !== 1'bx ) && ( addressOUT_prev[7] !== addressOUT_expected_prev[7] )
		&& ((addressOUT_expected_prev[7] !== last_addressOUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[7] = addressOUT_expected_prev[7];
	end
	if (
		( addressOUT_expected_prev[8] !== 1'bx ) && ( addressOUT_prev[8] !== addressOUT_expected_prev[8] )
		&& ((addressOUT_expected_prev[8] !== last_addressOUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[8] = addressOUT_expected_prev[8];
	end
	if (
		( addressOUT_expected_prev[9] !== 1'bx ) && ( addressOUT_prev[9] !== addressOUT_expected_prev[9] )
		&& ((addressOUT_expected_prev[9] !== last_addressOUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[9] = addressOUT_expected_prev[9];
	end
	if (
		( addressOUT_expected_prev[10] !== 1'bx ) && ( addressOUT_prev[10] !== addressOUT_expected_prev[10] )
		&& ((addressOUT_expected_prev[10] !== last_addressOUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[10] = addressOUT_expected_prev[10];
	end
	if (
		( addressOUT_expected_prev[11] !== 1'bx ) && ( addressOUT_prev[11] !== addressOUT_expected_prev[11] )
		&& ((addressOUT_expected_prev[11] !== last_addressOUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[11] = addressOUT_expected_prev[11];
	end
	if (
		( blockReplaced_d_expected_prev !== 1'bx ) && ( blockReplaced_d_prev !== blockReplaced_d_expected_prev )
		&& ((blockReplaced_d_expected_prev !== last_blockReplaced_d_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blockReplaced_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blockReplaced_d_expected_prev);
		$display ("     Real value = %b", blockReplaced_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blockReplaced_d_exp = blockReplaced_d_expected_prev;
	end
	if (
		( data_enable_d_expected_prev !== 1'bx ) && ( data_enable_d_prev !== data_enable_d_expected_prev )
		&& ((data_enable_d_expected_prev !== last_data_enable_d_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_enable_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_enable_d_expected_prev);
		$display ("     Real value = %b", data_enable_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_enable_d_exp = data_enable_d_expected_prev;
	end
	if (
		( data_out_cpu_expected_prev[0] !== 1'bx ) && ( data_out_cpu_prev[0] !== data_out_cpu_expected_prev[0] )
		&& ((data_out_cpu_expected_prev[0] !== last_data_out_cpu_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[0] = data_out_cpu_expected_prev[0];
	end
	if (
		( data_out_cpu_expected_prev[1] !== 1'bx ) && ( data_out_cpu_prev[1] !== data_out_cpu_expected_prev[1] )
		&& ((data_out_cpu_expected_prev[1] !== last_data_out_cpu_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[1] = data_out_cpu_expected_prev[1];
	end
	if (
		( data_out_cpu_expected_prev[2] !== 1'bx ) && ( data_out_cpu_prev[2] !== data_out_cpu_expected_prev[2] )
		&& ((data_out_cpu_expected_prev[2] !== last_data_out_cpu_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[2] = data_out_cpu_expected_prev[2];
	end
	if (
		( data_out_cpu_expected_prev[3] !== 1'bx ) && ( data_out_cpu_prev[3] !== data_out_cpu_expected_prev[3] )
		&& ((data_out_cpu_expected_prev[3] !== last_data_out_cpu_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[3] = data_out_cpu_expected_prev[3];
	end
	if (
		( data_out_cpu_expected_prev[4] !== 1'bx ) && ( data_out_cpu_prev[4] !== data_out_cpu_expected_prev[4] )
		&& ((data_out_cpu_expected_prev[4] !== last_data_out_cpu_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[4] = data_out_cpu_expected_prev[4];
	end
	if (
		( data_out_cpu_expected_prev[5] !== 1'bx ) && ( data_out_cpu_prev[5] !== data_out_cpu_expected_prev[5] )
		&& ((data_out_cpu_expected_prev[5] !== last_data_out_cpu_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[5] = data_out_cpu_expected_prev[5];
	end
	if (
		( data_out_cpu_expected_prev[6] !== 1'bx ) && ( data_out_cpu_prev[6] !== data_out_cpu_expected_prev[6] )
		&& ((data_out_cpu_expected_prev[6] !== last_data_out_cpu_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[6] = data_out_cpu_expected_prev[6];
	end
	if (
		( data_out_cpu_expected_prev[7] !== 1'bx ) && ( data_out_cpu_prev[7] !== data_out_cpu_expected_prev[7] )
		&& ((data_out_cpu_expected_prev[7] !== last_data_out_cpu_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[7] = data_out_cpu_expected_prev[7];
	end
	if (
		( data_out_cpu_expected_prev[8] !== 1'bx ) && ( data_out_cpu_prev[8] !== data_out_cpu_expected_prev[8] )
		&& ((data_out_cpu_expected_prev[8] !== last_data_out_cpu_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[8] = data_out_cpu_expected_prev[8];
	end
	if (
		( data_out_cpu_expected_prev[9] !== 1'bx ) && ( data_out_cpu_prev[9] !== data_out_cpu_expected_prev[9] )
		&& ((data_out_cpu_expected_prev[9] !== last_data_out_cpu_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[9] = data_out_cpu_expected_prev[9];
	end
	if (
		( data_out_cpu_expected_prev[10] !== 1'bx ) && ( data_out_cpu_prev[10] !== data_out_cpu_expected_prev[10] )
		&& ((data_out_cpu_expected_prev[10] !== last_data_out_cpu_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[10] = data_out_cpu_expected_prev[10];
	end
	if (
		( data_out_cpu_expected_prev[11] !== 1'bx ) && ( data_out_cpu_prev[11] !== data_out_cpu_expected_prev[11] )
		&& ((data_out_cpu_expected_prev[11] !== last_data_out_cpu_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[11] = data_out_cpu_expected_prev[11];
	end
	if (
		( data_out_cpu_expected_prev[12] !== 1'bx ) && ( data_out_cpu_prev[12] !== data_out_cpu_expected_prev[12] )
		&& ((data_out_cpu_expected_prev[12] !== last_data_out_cpu_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[12] = data_out_cpu_expected_prev[12];
	end
	if (
		( data_out_cpu_expected_prev[13] !== 1'bx ) && ( data_out_cpu_prev[13] !== data_out_cpu_expected_prev[13] )
		&& ((data_out_cpu_expected_prev[13] !== last_data_out_cpu_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[13] = data_out_cpu_expected_prev[13];
	end
	if (
		( data_out_cpu_expected_prev[14] !== 1'bx ) && ( data_out_cpu_prev[14] !== data_out_cpu_expected_prev[14] )
		&& ((data_out_cpu_expected_prev[14] !== last_data_out_cpu_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[14] = data_out_cpu_expected_prev[14];
	end
	if (
		( data_out_cpu_expected_prev[15] !== 1'bx ) && ( data_out_cpu_prev[15] !== data_out_cpu_expected_prev[15] )
		&& ((data_out_cpu_expected_prev[15] !== last_data_out_cpu_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_cpu_exp[15] = data_out_cpu_expected_prev[15];
	end
	if (
		( delayReq_expected_prev !== 1'bx ) && ( delayReq_prev !== delayReq_expected_prev )
		&& ((delayReq_expected_prev !== last_delayReq_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port delayReq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", delayReq_expected_prev);
		$display ("     Real value = %b", delayReq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_delayReq_exp = delayReq_expected_prev;
	end
	if (
		( hit_d_expected_prev !== 1'bx ) && ( hit_d_prev !== hit_d_expected_prev )
		&& ((hit_d_expected_prev !== last_hit_d_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hit_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hit_d_expected_prev);
		$display ("     Real value = %b", hit_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hit_d_exp = hit_d_expected_prev;
	end
	if (
		( lineIndex_d_expected_prev[0] !== 1'bx ) && ( lineIndex_d_prev[0] !== lineIndex_d_expected_prev[0] )
		&& ((lineIndex_d_expected_prev[0] !== last_lineIndex_d_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lineIndex_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lineIndex_d_expected_prev);
		$display ("     Real value = %b", lineIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lineIndex_d_exp[0] = lineIndex_d_expected_prev[0];
	end
	if (
		( lineIndex_d_expected_prev[1] !== 1'bx ) && ( lineIndex_d_prev[1] !== lineIndex_d_expected_prev[1] )
		&& ((lineIndex_d_expected_prev[1] !== last_lineIndex_d_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lineIndex_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lineIndex_d_expected_prev);
		$display ("     Real value = %b", lineIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lineIndex_d_exp[1] = lineIndex_d_expected_prev[1];
	end
	if (
		( lineIndex_d_expected_prev[2] !== 1'bx ) && ( lineIndex_d_prev[2] !== lineIndex_d_expected_prev[2] )
		&& ((lineIndex_d_expected_prev[2] !== last_lineIndex_d_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lineIndex_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lineIndex_d_expected_prev);
		$display ("     Real value = %b", lineIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lineIndex_d_exp[2] = lineIndex_d_expected_prev[2];
	end
	if (
		( read_data_d_expected_prev !== 1'bx ) && ( read_data_d_prev !== read_data_d_expected_prev )
		&& ((read_data_d_expected_prev !== last_read_data_d_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_d_expected_prev);
		$display ("     Real value = %b", read_data_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_read_data_d_exp = read_data_d_expected_prev;
	end
	if (
		( read_tag_d_expected_prev !== 1'bx ) && ( read_tag_d_prev !== read_tag_d_expected_prev )
		&& ((read_tag_d_expected_prev !== last_read_tag_d_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_tag_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_tag_d_expected_prev);
		$display ("     Real value = %b", read_tag_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_read_tag_d_exp = read_tag_d_expected_prev;
	end
	if (
		( replaceStatusOut_expected_prev !== 1'bx ) && ( replaceStatusOut_prev !== replaceStatusOut_expected_prev )
		&& ((replaceStatusOut_expected_prev !== last_replaceStatusOut_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port replaceStatusOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", replaceStatusOut_expected_prev);
		$display ("     Real value = %b", replaceStatusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_replaceStatusOut_exp = replaceStatusOut_expected_prev;
	end
	if (
		( tag_enable_d_expected_prev !== 1'bx ) && ( tag_enable_d_prev !== tag_enable_d_expected_prev )
		&& ((tag_enable_d_expected_prev !== last_tag_enable_d_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tag_enable_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tag_enable_d_expected_prev);
		$display ("     Real value = %b", tag_enable_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_tag_enable_d_exp = tag_enable_d_expected_prev;
	end
	if (
		( tagIndex_d_expected_prev[0] !== 1'bx ) && ( tagIndex_d_prev[0] !== tagIndex_d_expected_prev[0] )
		&& ((tagIndex_d_expected_prev[0] !== last_tagIndex_d_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[0] = tagIndex_d_expected_prev[0];
	end
	if (
		( tagIndex_d_expected_prev[1] !== 1'bx ) && ( tagIndex_d_prev[1] !== tagIndex_d_expected_prev[1] )
		&& ((tagIndex_d_expected_prev[1] !== last_tagIndex_d_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[1] = tagIndex_d_expected_prev[1];
	end
	if (
		( tagIndex_d_expected_prev[2] !== 1'bx ) && ( tagIndex_d_prev[2] !== tagIndex_d_expected_prev[2] )
		&& ((tagIndex_d_expected_prev[2] !== last_tagIndex_d_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[2] = tagIndex_d_expected_prev[2];
	end
	if (
		( tagIndex_d_expected_prev[3] !== 1'bx ) && ( tagIndex_d_prev[3] !== tagIndex_d_expected_prev[3] )
		&& ((tagIndex_d_expected_prev[3] !== last_tagIndex_d_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[3] = tagIndex_d_expected_prev[3];
	end
	if (
		( tagIndex_d_expected_prev[4] !== 1'bx ) && ( tagIndex_d_prev[4] !== tagIndex_d_expected_prev[4] )
		&& ((tagIndex_d_expected_prev[4] !== last_tagIndex_d_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[4] = tagIndex_d_expected_prev[4];
	end
	if (
		( tagIndex_d_expected_prev[5] !== 1'bx ) && ( tagIndex_d_prev[5] !== tagIndex_d_expected_prev[5] )
		&& ((tagIndex_d_expected_prev[5] !== last_tagIndex_d_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[5] = tagIndex_d_expected_prev[5];
	end
	if (
		( tagIndex_d_expected_prev[6] !== 1'bx ) && ( tagIndex_d_prev[6] !== tagIndex_d_expected_prev[6] )
		&& ((tagIndex_d_expected_prev[6] !== last_tagIndex_d_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tagIndex_d_exp[6] = tagIndex_d_expected_prev[6];
	end
	if (
		( tempDataIn_d_expected_prev[0] !== 1'bx ) && ( tempDataIn_d_prev[0] !== tempDataIn_d_expected_prev[0] )
		&& ((tempDataIn_d_expected_prev[0] !== last_tempDataIn_d_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[0] = tempDataIn_d_expected_prev[0];
	end
	if (
		( tempDataIn_d_expected_prev[1] !== 1'bx ) && ( tempDataIn_d_prev[1] !== tempDataIn_d_expected_prev[1] )
		&& ((tempDataIn_d_expected_prev[1] !== last_tempDataIn_d_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[1] = tempDataIn_d_expected_prev[1];
	end
	if (
		( tempDataIn_d_expected_prev[2] !== 1'bx ) && ( tempDataIn_d_prev[2] !== tempDataIn_d_expected_prev[2] )
		&& ((tempDataIn_d_expected_prev[2] !== last_tempDataIn_d_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[2] = tempDataIn_d_expected_prev[2];
	end
	if (
		( tempDataIn_d_expected_prev[3] !== 1'bx ) && ( tempDataIn_d_prev[3] !== tempDataIn_d_expected_prev[3] )
		&& ((tempDataIn_d_expected_prev[3] !== last_tempDataIn_d_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[3] = tempDataIn_d_expected_prev[3];
	end
	if (
		( tempDataIn_d_expected_prev[4] !== 1'bx ) && ( tempDataIn_d_prev[4] !== tempDataIn_d_expected_prev[4] )
		&& ((tempDataIn_d_expected_prev[4] !== last_tempDataIn_d_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[4] = tempDataIn_d_expected_prev[4];
	end
	if (
		( tempDataIn_d_expected_prev[5] !== 1'bx ) && ( tempDataIn_d_prev[5] !== tempDataIn_d_expected_prev[5] )
		&& ((tempDataIn_d_expected_prev[5] !== last_tempDataIn_d_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[5] = tempDataIn_d_expected_prev[5];
	end
	if (
		( tempDataIn_d_expected_prev[6] !== 1'bx ) && ( tempDataIn_d_prev[6] !== tempDataIn_d_expected_prev[6] )
		&& ((tempDataIn_d_expected_prev[6] !== last_tempDataIn_d_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[6] = tempDataIn_d_expected_prev[6];
	end
	if (
		( tempDataIn_d_expected_prev[7] !== 1'bx ) && ( tempDataIn_d_prev[7] !== tempDataIn_d_expected_prev[7] )
		&& ((tempDataIn_d_expected_prev[7] !== last_tempDataIn_d_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[7] = tempDataIn_d_expected_prev[7];
	end
	if (
		( tempDataIn_d_expected_prev[8] !== 1'bx ) && ( tempDataIn_d_prev[8] !== tempDataIn_d_expected_prev[8] )
		&& ((tempDataIn_d_expected_prev[8] !== last_tempDataIn_d_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[8] = tempDataIn_d_expected_prev[8];
	end
	if (
		( tempDataIn_d_expected_prev[9] !== 1'bx ) && ( tempDataIn_d_prev[9] !== tempDataIn_d_expected_prev[9] )
		&& ((tempDataIn_d_expected_prev[9] !== last_tempDataIn_d_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[9] = tempDataIn_d_expected_prev[9];
	end
	if (
		( tempDataIn_d_expected_prev[10] !== 1'bx ) && ( tempDataIn_d_prev[10] !== tempDataIn_d_expected_prev[10] )
		&& ((tempDataIn_d_expected_prev[10] !== last_tempDataIn_d_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[10] = tempDataIn_d_expected_prev[10];
	end
	if (
		( tempDataIn_d_expected_prev[11] !== 1'bx ) && ( tempDataIn_d_prev[11] !== tempDataIn_d_expected_prev[11] )
		&& ((tempDataIn_d_expected_prev[11] !== last_tempDataIn_d_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[11] = tempDataIn_d_expected_prev[11];
	end
	if (
		( tempDataIn_d_expected_prev[12] !== 1'bx ) && ( tempDataIn_d_prev[12] !== tempDataIn_d_expected_prev[12] )
		&& ((tempDataIn_d_expected_prev[12] !== last_tempDataIn_d_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[12] = tempDataIn_d_expected_prev[12];
	end
	if (
		( tempDataIn_d_expected_prev[13] !== 1'bx ) && ( tempDataIn_d_prev[13] !== tempDataIn_d_expected_prev[13] )
		&& ((tempDataIn_d_expected_prev[13] !== last_tempDataIn_d_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[13] = tempDataIn_d_expected_prev[13];
	end
	if (
		( tempDataIn_d_expected_prev[14] !== 1'bx ) && ( tempDataIn_d_prev[14] !== tempDataIn_d_expected_prev[14] )
		&& ((tempDataIn_d_expected_prev[14] !== last_tempDataIn_d_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[14] = tempDataIn_d_expected_prev[14];
	end
	if (
		( tempDataIn_d_expected_prev[15] !== 1'bx ) && ( tempDataIn_d_prev[15] !== tempDataIn_d_expected_prev[15] )
		&& ((tempDataIn_d_expected_prev[15] !== last_tempDataIn_d_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tempDataIn_d_exp[15] = tempDataIn_d_expected_prev[15];
	end
	if (
		( tempDataOut_d_expected_prev[0] !== 1'bx ) && ( tempDataOut_d_prev[0] !== tempDataOut_d_expected_prev[0] )
		&& ((tempDataOut_d_expected_prev[0] !== last_tempDataOut_d_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[0] = tempDataOut_d_expected_prev[0];
	end
	if (
		( tempDataOut_d_expected_prev[1] !== 1'bx ) && ( tempDataOut_d_prev[1] !== tempDataOut_d_expected_prev[1] )
		&& ((tempDataOut_d_expected_prev[1] !== last_tempDataOut_d_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[1] = tempDataOut_d_expected_prev[1];
	end
	if (
		( tempDataOut_d_expected_prev[2] !== 1'bx ) && ( tempDataOut_d_prev[2] !== tempDataOut_d_expected_prev[2] )
		&& ((tempDataOut_d_expected_prev[2] !== last_tempDataOut_d_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[2] = tempDataOut_d_expected_prev[2];
	end
	if (
		( tempDataOut_d_expected_prev[3] !== 1'bx ) && ( tempDataOut_d_prev[3] !== tempDataOut_d_expected_prev[3] )
		&& ((tempDataOut_d_expected_prev[3] !== last_tempDataOut_d_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[3] = tempDataOut_d_expected_prev[3];
	end
	if (
		( tempDataOut_d_expected_prev[4] !== 1'bx ) && ( tempDataOut_d_prev[4] !== tempDataOut_d_expected_prev[4] )
		&& ((tempDataOut_d_expected_prev[4] !== last_tempDataOut_d_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[4] = tempDataOut_d_expected_prev[4];
	end
	if (
		( tempDataOut_d_expected_prev[5] !== 1'bx ) && ( tempDataOut_d_prev[5] !== tempDataOut_d_expected_prev[5] )
		&& ((tempDataOut_d_expected_prev[5] !== last_tempDataOut_d_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[5] = tempDataOut_d_expected_prev[5];
	end
	if (
		( tempDataOut_d_expected_prev[6] !== 1'bx ) && ( tempDataOut_d_prev[6] !== tempDataOut_d_expected_prev[6] )
		&& ((tempDataOut_d_expected_prev[6] !== last_tempDataOut_d_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[6] = tempDataOut_d_expected_prev[6];
	end
	if (
		( tempDataOut_d_expected_prev[7] !== 1'bx ) && ( tempDataOut_d_prev[7] !== tempDataOut_d_expected_prev[7] )
		&& ((tempDataOut_d_expected_prev[7] !== last_tempDataOut_d_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[7] = tempDataOut_d_expected_prev[7];
	end
	if (
		( tempDataOut_d_expected_prev[8] !== 1'bx ) && ( tempDataOut_d_prev[8] !== tempDataOut_d_expected_prev[8] )
		&& ((tempDataOut_d_expected_prev[8] !== last_tempDataOut_d_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[8] = tempDataOut_d_expected_prev[8];
	end
	if (
		( tempDataOut_d_expected_prev[9] !== 1'bx ) && ( tempDataOut_d_prev[9] !== tempDataOut_d_expected_prev[9] )
		&& ((tempDataOut_d_expected_prev[9] !== last_tempDataOut_d_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[9] = tempDataOut_d_expected_prev[9];
	end
	if (
		( tempDataOut_d_expected_prev[10] !== 1'bx ) && ( tempDataOut_d_prev[10] !== tempDataOut_d_expected_prev[10] )
		&& ((tempDataOut_d_expected_prev[10] !== last_tempDataOut_d_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[10] = tempDataOut_d_expected_prev[10];
	end
	if (
		( tempDataOut_d_expected_prev[11] !== 1'bx ) && ( tempDataOut_d_prev[11] !== tempDataOut_d_expected_prev[11] )
		&& ((tempDataOut_d_expected_prev[11] !== last_tempDataOut_d_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[11] = tempDataOut_d_expected_prev[11];
	end
	if (
		( tempDataOut_d_expected_prev[12] !== 1'bx ) && ( tempDataOut_d_prev[12] !== tempDataOut_d_expected_prev[12] )
		&& ((tempDataOut_d_expected_prev[12] !== last_tempDataOut_d_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[12] = tempDataOut_d_expected_prev[12];
	end
	if (
		( tempDataOut_d_expected_prev[13] !== 1'bx ) && ( tempDataOut_d_prev[13] !== tempDataOut_d_expected_prev[13] )
		&& ((tempDataOut_d_expected_prev[13] !== last_tempDataOut_d_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[13] = tempDataOut_d_expected_prev[13];
	end
	if (
		( tempDataOut_d_expected_prev[14] !== 1'bx ) && ( tempDataOut_d_prev[14] !== tempDataOut_d_expected_prev[14] )
		&& ((tempDataOut_d_expected_prev[14] !== last_tempDataOut_d_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[14] = tempDataOut_d_expected_prev[14];
	end
	if (
		( tempDataOut_d_expected_prev[15] !== 1'bx ) && ( tempDataOut_d_prev[15] !== tempDataOut_d_expected_prev[15] )
		&& ((tempDataOut_d_expected_prev[15] !== last_tempDataOut_d_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tempDataOut_d_exp[15] = tempDataOut_d_expected_prev[15];
	end
	if (
		( wordIndex_d_expected_prev[0] !== 1'bx ) && ( wordIndex_d_prev[0] !== wordIndex_d_expected_prev[0] )
		&& ((wordIndex_d_expected_prev[0] !== last_wordIndex_d_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wordIndex_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wordIndex_d_expected_prev);
		$display ("     Real value = %b", wordIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_wordIndex_d_exp[0] = wordIndex_d_expected_prev[0];
	end
	if (
		( wordIndex_d_expected_prev[1] !== 1'bx ) && ( wordIndex_d_prev[1] !== wordIndex_d_expected_prev[1] )
		&& ((wordIndex_d_expected_prev[1] !== last_wordIndex_d_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wordIndex_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wordIndex_d_expected_prev);
		$display ("     Real value = %b", wordIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_wordIndex_d_exp[1] = wordIndex_d_expected_prev[1];
	end
	if (
		( write_block_d_expected_prev !== 1'bx ) && ( write_block_d_prev !== write_block_d_expected_prev )
		&& ((write_block_d_expected_prev !== last_write_block_d_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_block_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_block_d_expected_prev);
		$display ("     Real value = %b", write_block_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_block_d_exp = write_block_d_expected_prev;
	end
	if (
		( write_data_d_expected_prev !== 1'bx ) && ( write_data_d_prev !== write_data_d_expected_prev )
		&& ((write_data_d_expected_prev !== last_write_data_d_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_d_expected_prev);
		$display ("     Real value = %b", write_data_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_write_data_d_exp = write_data_d_expected_prev;
	end
	if (
		( write_tag_d_expected_prev !== 1'bx ) && ( write_tag_d_prev !== write_tag_d_expected_prev )
		&& ((write_tag_d_expected_prev !== last_write_tag_d_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_tag_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_tag_d_expected_prev);
		$display ("     Real value = %b", write_tag_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_write_tag_d_exp = write_tag_d_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CacheController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] address_block_in;
reg [11:0] addressIN;
reg clock;
reg [63:0] data_block_in;
reg [15:0] data_in;
reg MreIn;
reg MweIn;
reg replaceStatusIn;
reg reset;
// wires                                               
wire [11:0] addressOUT;
wire blockReplaced_d;
wire data_enable_d;
wire [15:0] data_out_cpu;
wire delayReq;
wire hit_d;
wire [2:0] lineIndex_d;
wire read_data_d;
wire read_tag_d;
wire replaceStatusOut;
wire tag_enable_d;
wire [6:0] tagIndex_d;
wire [15:0] tempDataIn_d;
wire [15:0] tempDataOut_d;
wire [1:0] wordIndex_d;
wire write_block_d;
wire write_data_d;
wire write_tag_d;

wire sampler;                             

// assign statements (if any)                          
CacheController i1 (
// port map - connection between master ports and signals/registers   
	.address_block_in(address_block_in),
	.addressIN(addressIN),
	.addressOUT(addressOUT),
	.blockReplaced_d(blockReplaced_d),
	.clock(clock),
	.data_block_in(data_block_in),
	.data_enable_d(data_enable_d),
	.data_in(data_in),
	.data_out_cpu(data_out_cpu),
	.delayReq(delayReq),
	.hit_d(hit_d),
	.lineIndex_d(lineIndex_d),
	.MreIn(MreIn),
	.MweIn(MweIn),
	.read_data_d(read_data_d),
	.read_tag_d(read_tag_d),
	.replaceStatusIn(replaceStatusIn),
	.replaceStatusOut(replaceStatusOut),
	.reset(reset),
	.tag_enable_d(tag_enable_d),
	.tagIndex_d(tagIndex_d),
	.tempDataIn_d(tempDataIn_d),
	.tempDataOut_d(tempDataOut_d),
	.wordIndex_d(wordIndex_d),
	.write_block_d(write_block_d),
	.write_data_d(write_data_d),
	.write_tag_d(write_tag_d)
);
// address_block_in[ 11 ]
initial
begin
	address_block_in[11] = 1'b0;
end 
// address_block_in[ 10 ]
initial
begin
	address_block_in[10] = 1'b0;
end 
// address_block_in[ 9 ]
initial
begin
	address_block_in[9] = 1'b0;
end 
// address_block_in[ 8 ]
initial
begin
	address_block_in[8] = 1'b0;
end 
// address_block_in[ 7 ]
initial
begin
	address_block_in[7] = 1'b0;
end 
// address_block_in[ 6 ]
initial
begin
	address_block_in[6] = 1'b0;
end 
// address_block_in[ 5 ]
initial
begin
	address_block_in[5] = 1'b0;
end 
// address_block_in[ 4 ]
initial
begin
	address_block_in[4] = 1'b0;
end 
// address_block_in[ 3 ]
initial
begin
	address_block_in[3] = 1'b0;
end 
// address_block_in[ 2 ]
initial
begin
	address_block_in[2] = 1'b0;
end 
// address_block_in[ 1 ]
initial
begin
	address_block_in[1] = 1'b0;
end 
// address_block_in[ 0 ]
initial
begin
	address_block_in[0] = 1'b0;
end 
// addressIN[ 11 ]
initial
begin
	addressIN[11] = 1'b0;
end 
// addressIN[ 10 ]
initial
begin
	addressIN[10] = 1'b0;
end 
// addressIN[ 9 ]
initial
begin
	addressIN[9] = 1'b0;
end 
// addressIN[ 8 ]
initial
begin
	addressIN[8] = 1'b0;
end 
// addressIN[ 7 ]
initial
begin
	addressIN[7] = 1'b0;
end 
// addressIN[ 6 ]
initial
begin
	addressIN[6] = 1'b0;
end 
// addressIN[ 5 ]
initial
begin
	addressIN[5] = 1'b0;
end 
// addressIN[ 4 ]
initial
begin
	addressIN[4] = 1'b0;
end 
// addressIN[ 3 ]
initial
begin
	addressIN[3] = 1'b0;
end 
// addressIN[ 2 ]
initial
begin
	addressIN[2] = 1'b1;
	addressIN[2] = #600000 1'b0;
end 
// addressIN[ 1 ]
initial
begin
	addressIN[1] = 1'b0;
end 
// addressIN[ 0 ]
initial
begin
	addressIN[0] = 1'b1;
	addressIN[0] = #600000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// data_block_in[ 63 ]
initial
begin
	data_block_in[63] = 1'b1;
end 
// data_block_in[ 62 ]
initial
begin
	data_block_in[62] = 1'b0;
end 
// data_block_in[ 61 ]
initial
begin
	data_block_in[61] = 1'b1;
end 
// data_block_in[ 60 ]
initial
begin
	data_block_in[60] = 1'b0;
end 
// data_block_in[ 59 ]
initial
begin
	data_block_in[59] = 1'b1;
end 
// data_block_in[ 58 ]
initial
begin
	data_block_in[58] = 1'b0;
end 
// data_block_in[ 57 ]
initial
begin
	data_block_in[57] = 1'b1;
end 
// data_block_in[ 56 ]
initial
begin
	data_block_in[56] = 1'b0;
end 
// data_block_in[ 55 ]
initial
begin
	data_block_in[55] = 1'b1;
end 
// data_block_in[ 54 ]
initial
begin
	data_block_in[54] = 1'b0;
end 
// data_block_in[ 53 ]
initial
begin
	data_block_in[53] = 1'b1;
end 
// data_block_in[ 52 ]
initial
begin
	data_block_in[52] = 1'b0;
end 
// data_block_in[ 51 ]
initial
begin
	data_block_in[51] = 1'b1;
end 
// data_block_in[ 50 ]
initial
begin
	data_block_in[50] = 1'b0;
end 
// data_block_in[ 49 ]
initial
begin
	data_block_in[49] = 1'b1;
end 
// data_block_in[ 48 ]
initial
begin
	data_block_in[48] = 1'b0;
end 
// data_block_in[ 47 ]
initial
begin
	data_block_in[47] = 1'b1;
end 
// data_block_in[ 46 ]
initial
begin
	data_block_in[46] = 1'b0;
end 
// data_block_in[ 45 ]
initial
begin
	data_block_in[45] = 1'b1;
end 
// data_block_in[ 44 ]
initial
begin
	data_block_in[44] = 1'b1;
end 
// data_block_in[ 43 ]
initial
begin
	data_block_in[43] = 1'b1;
end 
// data_block_in[ 42 ]
initial
begin
	data_block_in[42] = 1'b0;
end 
// data_block_in[ 41 ]
initial
begin
	data_block_in[41] = 1'b1;
end 
// data_block_in[ 40 ]
initial
begin
	data_block_in[40] = 1'b1;
end 
// data_block_in[ 39 ]
initial
begin
	data_block_in[39] = 1'b1;
end 
// data_block_in[ 38 ]
initial
begin
	data_block_in[38] = 1'b0;
end 
// data_block_in[ 37 ]
initial
begin
	data_block_in[37] = 1'b1;
end 
// data_block_in[ 36 ]
initial
begin
	data_block_in[36] = 1'b1;
end 
// data_block_in[ 35 ]
initial
begin
	data_block_in[35] = 1'b1;
end 
// data_block_in[ 34 ]
initial
begin
	data_block_in[34] = 1'b0;
end 
// data_block_in[ 33 ]
initial
begin
	data_block_in[33] = 1'b1;
end 
// data_block_in[ 32 ]
initial
begin
	data_block_in[32] = 1'b1;
end 
// data_block_in[ 31 ]
initial
begin
	data_block_in[31] = 1'b1;
end 
// data_block_in[ 30 ]
initial
begin
	data_block_in[30] = 1'b1;
end 
// data_block_in[ 29 ]
initial
begin
	data_block_in[29] = 1'b0;
end 
// data_block_in[ 28 ]
initial
begin
	data_block_in[28] = 1'b0;
end 
// data_block_in[ 27 ]
initial
begin
	data_block_in[27] = 1'b1;
end 
// data_block_in[ 26 ]
initial
begin
	data_block_in[26] = 1'b1;
end 
// data_block_in[ 25 ]
initial
begin
	data_block_in[25] = 1'b0;
end 
// data_block_in[ 24 ]
initial
begin
	data_block_in[24] = 1'b0;
end 
// data_block_in[ 23 ]
initial
begin
	data_block_in[23] = 1'b1;
end 
// data_block_in[ 22 ]
initial
begin
	data_block_in[22] = 1'b1;
end 
// data_block_in[ 21 ]
initial
begin
	data_block_in[21] = 1'b0;
end 
// data_block_in[ 20 ]
initial
begin
	data_block_in[20] = 1'b0;
end 
// data_block_in[ 19 ]
initial
begin
	data_block_in[19] = 1'b1;
end 
// data_block_in[ 18 ]
initial
begin
	data_block_in[18] = 1'b1;
end 
// data_block_in[ 17 ]
initial
begin
	data_block_in[17] = 1'b0;
end 
// data_block_in[ 16 ]
initial
begin
	data_block_in[16] = 1'b0;
end 
// data_block_in[ 15 ]
initial
begin
	data_block_in[15] = 1'b1;
end 
// data_block_in[ 14 ]
initial
begin
	data_block_in[14] = 1'b1;
end 
// data_block_in[ 13 ]
initial
begin
	data_block_in[13] = 1'b0;
end 
// data_block_in[ 12 ]
initial
begin
	data_block_in[12] = 1'b1;
end 
// data_block_in[ 11 ]
initial
begin
	data_block_in[11] = 1'b1;
end 
// data_block_in[ 10 ]
initial
begin
	data_block_in[10] = 1'b1;
end 
// data_block_in[ 9 ]
initial
begin
	data_block_in[9] = 1'b0;
end 
// data_block_in[ 8 ]
initial
begin
	data_block_in[8] = 1'b1;
end 
// data_block_in[ 7 ]
initial
begin
	data_block_in[7] = 1'b1;
end 
// data_block_in[ 6 ]
initial
begin
	data_block_in[6] = 1'b1;
end 
// data_block_in[ 5 ]
initial
begin
	data_block_in[5] = 1'b0;
end 
// data_block_in[ 4 ]
initial
begin
	data_block_in[4] = 1'b1;
end 
// data_block_in[ 3 ]
initial
begin
	data_block_in[3] = 1'b1;
end 
// data_block_in[ 2 ]
initial
begin
	data_block_in[2] = 1'b1;
end 
// data_block_in[ 1 ]
initial
begin
	data_block_in[1] = 1'b0;
end 
// data_block_in[ 0 ]
initial
begin
	data_block_in[0] = 1'b1;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b1;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b1;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b1;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
end 

// MreIn
initial
begin
	MreIn = 1'b0;
	MreIn = #250000 1'b1;
	MreIn = #80000 1'b0;
	MreIn = #190000 1'b1;
	MreIn = #40000 1'b0;
end 

// MweIn
initial
begin
	MweIn = 1'b0;
	MweIn = #50000 1'b1;
	MweIn = #110000 1'b0;
end 

// replaceStatusIn
initial
begin
	replaceStatusIn = 1'b0;
	replaceStatusIn = #390000 1'b1;
	replaceStatusIn = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

CacheController_vlg_sample_tst tb_sample (
	.address_block_in(address_block_in),
	.addressIN(addressIN),
	.clock(clock),
	.data_block_in(data_block_in),
	.data_in(data_in),
	.MreIn(MreIn),
	.MweIn(MweIn),
	.replaceStatusIn(replaceStatusIn),
	.reset(reset),
	.sampler_tx(sampler)
);

CacheController_vlg_check_tst tb_out(
	.addressOUT(addressOUT),
	.blockReplaced_d(blockReplaced_d),
	.data_enable_d(data_enable_d),
	.data_out_cpu(data_out_cpu),
	.delayReq(delayReq),
	.hit_d(hit_d),
	.lineIndex_d(lineIndex_d),
	.read_data_d(read_data_d),
	.read_tag_d(read_tag_d),
	.replaceStatusOut(replaceStatusOut),
	.tag_enable_d(tag_enable_d),
	.tagIndex_d(tagIndex_d),
	.tempDataIn_d(tempDataIn_d),
	.tempDataOut_d(tempDataOut_d),
	.wordIndex_d(wordIndex_d),
	.write_block_d(write_block_d),
	.write_data_d(write_data_d),
	.write_tag_d(write_tag_d),
	.sampler_rx(sampler)
);
endmodule

