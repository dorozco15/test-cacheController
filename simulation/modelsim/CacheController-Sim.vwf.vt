// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2016 15:18:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CacheController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CacheController_vlg_sample_tst(
	address_block_in,
	addressIN,
	clock,
	clock_en,
	data_block_in,
	data_in,
	MreIn,
	MweIn,
	replaceStatusIn,
	reset,
	sampler_tx
);
input [11:0] address_block_in;
input [11:0] addressIN;
input  clock;
input  clock_en;
input [63:0] data_block_in;
input [15:0] data_in;
input  MreIn;
input  MweIn;
input  replaceStatusIn;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(address_block_in or addressIN or clock or clock_en or data_block_in or data_in or MreIn or MweIn or replaceStatusIn or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CacheController_vlg_check_tst (
	addressOUT,
	blockReplaced_d,
	data_block_out,
	data_enable_d,
	data_out_cpu,
	delayReq,
	done_out,
	hit_d,
	read_data_d,
	read_tag_d,
	replaceStatusOut,
	send_block_out_d,
	state_d,
	tag_enable_d,
	write_block_d,
	write_data_d,
	write_tag_d,
	sampler_rx
);
input [11:0] addressOUT;
input  blockReplaced_d;
input [63:0] data_block_out;
input  data_enable_d;
input [15:0] data_out_cpu;
input  delayReq;
input  done_out;
input  hit_d;
input  read_data_d;
input  read_tag_d;
input  replaceStatusOut;
input  send_block_out_d;
input [3:0] state_d;
input  tag_enable_d;
input  write_block_d;
input  write_data_d;
input  write_tag_d;
input sampler_rx;

reg [11:0] addressOUT_expected;
reg  blockReplaced_d_expected;
reg [63:0] data_block_out_expected;
reg  data_enable_d_expected;
reg [15:0] data_out_cpu_expected;
reg  delayReq_expected;
reg  done_out_expected;
reg  hit_d_expected;
reg  read_data_d_expected;
reg  read_tag_d_expected;
reg  replaceStatusOut_expected;
reg  send_block_out_d_expected;
reg [3:0] state_d_expected;
reg  tag_enable_d_expected;
reg  write_block_d_expected;
reg  write_data_d_expected;
reg  write_tag_d_expected;

reg [11:0] addressOUT_prev;
reg  blockReplaced_d_prev;
reg [63:0] data_block_out_prev;
reg  data_enable_d_prev;
reg [15:0] data_out_cpu_prev;
reg  delayReq_prev;
reg  done_out_prev;
reg  hit_d_prev;
reg  read_data_d_prev;
reg  read_tag_d_prev;
reg  replaceStatusOut_prev;
reg  send_block_out_d_prev;
reg [3:0] state_d_prev;
reg  tag_enable_d_prev;
reg  write_block_d_prev;
reg  write_data_d_prev;
reg  write_tag_d_prev;

reg [11:0] addressOUT_expected_prev;
reg  blockReplaced_d_expected_prev;
reg [63:0] data_block_out_expected_prev;
reg  data_enable_d_expected_prev;
reg [15:0] data_out_cpu_expected_prev;
reg  delayReq_expected_prev;
reg  done_out_expected_prev;
reg  hit_d_expected_prev;
reg  read_data_d_expected_prev;
reg  read_tag_d_expected_prev;
reg  replaceStatusOut_expected_prev;
reg  send_block_out_d_expected_prev;
reg [3:0] state_d_expected_prev;
reg  tag_enable_d_expected_prev;
reg  write_block_d_expected_prev;
reg  write_data_d_expected_prev;
reg  write_tag_d_expected_prev;

reg [11:0] last_addressOUT_exp;
reg  last_blockReplaced_d_exp;
reg [63:0] last_data_block_out_exp;
reg  last_data_enable_d_exp;
reg [15:0] last_data_out_cpu_exp;
reg  last_delayReq_exp;
reg  last_done_out_exp;
reg  last_hit_d_exp;
reg  last_read_data_d_exp;
reg  last_read_tag_d_exp;
reg  last_replaceStatusOut_exp;
reg  last_send_block_out_d_exp;
reg [3:0] last_state_d_exp;
reg  last_tag_enable_d_exp;
reg  last_write_block_d_exp;
reg  last_write_data_d_exp;
reg  last_write_tag_d_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	addressOUT_prev = addressOUT;
	blockReplaced_d_prev = blockReplaced_d;
	data_block_out_prev = data_block_out;
	data_enable_d_prev = data_enable_d;
	data_out_cpu_prev = data_out_cpu;
	delayReq_prev = delayReq;
	done_out_prev = done_out;
	hit_d_prev = hit_d;
	read_data_d_prev = read_data_d;
	read_tag_d_prev = read_tag_d;
	replaceStatusOut_prev = replaceStatusOut;
	send_block_out_d_prev = send_block_out_d;
	state_d_prev = state_d;
	tag_enable_d_prev = tag_enable_d;
	write_block_d_prev = write_block_d;
	write_data_d_prev = write_data_d;
	write_tag_d_prev = write_tag_d;
end

// update expected /o prevs

always @(trigger)
begin
	addressOUT_expected_prev = addressOUT_expected;
	blockReplaced_d_expected_prev = blockReplaced_d_expected;
	data_block_out_expected_prev = data_block_out_expected;
	data_enable_d_expected_prev = data_enable_d_expected;
	data_out_cpu_expected_prev = data_out_cpu_expected;
	delayReq_expected_prev = delayReq_expected;
	done_out_expected_prev = done_out_expected;
	hit_d_expected_prev = hit_d_expected;
	read_data_d_expected_prev = read_data_d_expected;
	read_tag_d_expected_prev = read_tag_d_expected;
	replaceStatusOut_expected_prev = replaceStatusOut_expected;
	send_block_out_d_expected_prev = send_block_out_d_expected;
	state_d_expected_prev = state_d_expected;
	tag_enable_d_expected_prev = tag_enable_d_expected;
	write_block_d_expected_prev = write_block_d_expected;
	write_data_d_expected_prev = write_data_d_expected;
	write_tag_d_expected_prev = write_tag_d_expected;
end


// expected addressOUT[ 11 ]
initial
begin
	addressOUT_expected[11] = 1'bX;
	addressOUT_expected[11] = #999000 1'b0;
end 
// expected addressOUT[ 10 ]
initial
begin
	addressOUT_expected[10] = 1'bX;
	addressOUT_expected[10] = #999000 1'b0;
end 
// expected addressOUT[ 9 ]
initial
begin
	addressOUT_expected[9] = 1'bX;
	addressOUT_expected[9] = #999000 1'b0;
end 
// expected addressOUT[ 8 ]
initial
begin
	addressOUT_expected[8] = 1'bX;
	addressOUT_expected[8] = #999000 1'b0;
end 
// expected addressOUT[ 7 ]
initial
begin
	addressOUT_expected[7] = 1'bX;
	addressOUT_expected[7] = #999000 1'b0;
end 
// expected addressOUT[ 6 ]
initial
begin
	addressOUT_expected[6] = 1'bX;
	addressOUT_expected[6] = #999000 1'b0;
end 
// expected addressOUT[ 5 ]
initial
begin
	addressOUT_expected[5] = 1'bX;
	addressOUT_expected[5] = #999000 1'b0;
end 
// expected addressOUT[ 4 ]
initial
begin
	addressOUT_expected[4] = 1'bX;
	addressOUT_expected[4] = #999000 1'b0;
end 
// expected addressOUT[ 3 ]
initial
begin
	addressOUT_expected[3] = 1'bX;
	addressOUT_expected[3] = #999000 1'b0;
end 
// expected addressOUT[ 2 ]
initial
begin
	addressOUT_expected[2] = 1'bX;
	addressOUT_expected[2] = #999000 1'b0;
end 
// expected addressOUT[ 1 ]
initial
begin
	addressOUT_expected[1] = 1'bX;
	addressOUT_expected[1] = #999000 1'b0;
end 
// expected addressOUT[ 0 ]
initial
begin
	addressOUT_expected[0] = 1'bX;
	addressOUT_expected[0] = #999000 1'b0;
end 
// expected data_out_cpu[ 15 ]
initial
begin
	data_out_cpu_expected[15] = 1'bX;
end 
// expected data_out_cpu[ 14 ]
initial
begin
	data_out_cpu_expected[14] = 1'bX;
end 
// expected data_out_cpu[ 13 ]
initial
begin
	data_out_cpu_expected[13] = 1'bX;
end 
// expected data_out_cpu[ 12 ]
initial
begin
	data_out_cpu_expected[12] = 1'bX;
end 
// expected data_out_cpu[ 11 ]
initial
begin
	data_out_cpu_expected[11] = 1'bX;
end 
// expected data_out_cpu[ 10 ]
initial
begin
	data_out_cpu_expected[10] = 1'bX;
end 
// expected data_out_cpu[ 9 ]
initial
begin
	data_out_cpu_expected[9] = 1'bX;
end 
// expected data_out_cpu[ 8 ]
initial
begin
	data_out_cpu_expected[8] = 1'bX;
end 
// expected data_out_cpu[ 7 ]
initial
begin
	data_out_cpu_expected[7] = 1'bX;
end 
// expected data_out_cpu[ 6 ]
initial
begin
	data_out_cpu_expected[6] = 1'bX;
end 
// expected data_out_cpu[ 5 ]
initial
begin
	data_out_cpu_expected[5] = 1'bX;
end 
// expected data_out_cpu[ 4 ]
initial
begin
	data_out_cpu_expected[4] = 1'bX;
end 
// expected data_out_cpu[ 3 ]
initial
begin
	data_out_cpu_expected[3] = 1'bX;
end 
// expected data_out_cpu[ 2 ]
initial
begin
	data_out_cpu_expected[2] = 1'bX;
end 
// expected data_out_cpu[ 1 ]
initial
begin
	data_out_cpu_expected[1] = 1'bX;
end 
// expected data_out_cpu[ 0 ]
initial
begin
	data_out_cpu_expected[0] = 1'bX;
end 

// expected delayReq
initial
begin
	delayReq_expected = 1'bX;
end 

// expected read_data_d
initial
begin
	read_data_d_expected = 1'bX;
end 

// expected write_data_d
initial
begin
	write_data_d_expected = 1'bX;
end 

// expected replaceStatusOut
initial
begin
	replaceStatusOut_expected = 1'bX;
end 

// expected hit_d
initial
begin
	hit_d_expected = 1'bX;
end 

// expected data_enable_d
initial
begin
	data_enable_d_expected = 1'bX;
end 
// expected state_d[ 3 ]
initial
begin
	state_d_expected[3] = 1'bX;
end 
// expected state_d[ 2 ]
initial
begin
	state_d_expected[2] = 1'bX;
end 
// expected state_d[ 1 ]
initial
begin
	state_d_expected[1] = 1'bX;
end 
// expected state_d[ 0 ]
initial
begin
	state_d_expected[0] = 1'bX;
end 

// expected done_out
initial
begin
	done_out_expected = 1'bX;
end 

// expected tag_enable_d
initial
begin
	tag_enable_d_expected = 1'bX;
end 

// expected read_tag_d
initial
begin
	read_tag_d_expected = 1'bX;
end 

// expected write_tag_d
initial
begin
	write_tag_d_expected = 1'bX;
end 

// expected blockReplaced_d
initial
begin
	blockReplaced_d_expected = 1'bX;
end 

// expected write_block_d
initial
begin
	write_block_d_expected = 1'bX;
end 
// expected data_block_out[ 63 ]
initial
begin
	data_block_out_expected[63] = 1'bX;
end 
// expected data_block_out[ 62 ]
initial
begin
	data_block_out_expected[62] = 1'bX;
end 
// expected data_block_out[ 61 ]
initial
begin
	data_block_out_expected[61] = 1'bX;
end 
// expected data_block_out[ 60 ]
initial
begin
	data_block_out_expected[60] = 1'bX;
end 
// expected data_block_out[ 59 ]
initial
begin
	data_block_out_expected[59] = 1'bX;
end 
// expected data_block_out[ 58 ]
initial
begin
	data_block_out_expected[58] = 1'bX;
end 
// expected data_block_out[ 57 ]
initial
begin
	data_block_out_expected[57] = 1'bX;
end 
// expected data_block_out[ 56 ]
initial
begin
	data_block_out_expected[56] = 1'bX;
end 
// expected data_block_out[ 55 ]
initial
begin
	data_block_out_expected[55] = 1'bX;
end 
// expected data_block_out[ 54 ]
initial
begin
	data_block_out_expected[54] = 1'bX;
end 
// expected data_block_out[ 53 ]
initial
begin
	data_block_out_expected[53] = 1'bX;
end 
// expected data_block_out[ 52 ]
initial
begin
	data_block_out_expected[52] = 1'bX;
end 
// expected data_block_out[ 51 ]
initial
begin
	data_block_out_expected[51] = 1'bX;
end 
// expected data_block_out[ 50 ]
initial
begin
	data_block_out_expected[50] = 1'bX;
end 
// expected data_block_out[ 49 ]
initial
begin
	data_block_out_expected[49] = 1'bX;
end 
// expected data_block_out[ 48 ]
initial
begin
	data_block_out_expected[48] = 1'bX;
end 
// expected data_block_out[ 47 ]
initial
begin
	data_block_out_expected[47] = 1'bX;
end 
// expected data_block_out[ 46 ]
initial
begin
	data_block_out_expected[46] = 1'bX;
end 
// expected data_block_out[ 45 ]
initial
begin
	data_block_out_expected[45] = 1'bX;
end 
// expected data_block_out[ 44 ]
initial
begin
	data_block_out_expected[44] = 1'bX;
end 
// expected data_block_out[ 43 ]
initial
begin
	data_block_out_expected[43] = 1'bX;
end 
// expected data_block_out[ 42 ]
initial
begin
	data_block_out_expected[42] = 1'bX;
end 
// expected data_block_out[ 41 ]
initial
begin
	data_block_out_expected[41] = 1'bX;
end 
// expected data_block_out[ 40 ]
initial
begin
	data_block_out_expected[40] = 1'bX;
end 
// expected data_block_out[ 39 ]
initial
begin
	data_block_out_expected[39] = 1'bX;
end 
// expected data_block_out[ 38 ]
initial
begin
	data_block_out_expected[38] = 1'bX;
end 
// expected data_block_out[ 37 ]
initial
begin
	data_block_out_expected[37] = 1'bX;
end 
// expected data_block_out[ 36 ]
initial
begin
	data_block_out_expected[36] = 1'bX;
end 
// expected data_block_out[ 35 ]
initial
begin
	data_block_out_expected[35] = 1'bX;
end 
// expected data_block_out[ 34 ]
initial
begin
	data_block_out_expected[34] = 1'bX;
end 
// expected data_block_out[ 33 ]
initial
begin
	data_block_out_expected[33] = 1'bX;
end 
// expected data_block_out[ 32 ]
initial
begin
	data_block_out_expected[32] = 1'bX;
end 
// expected data_block_out[ 31 ]
initial
begin
	data_block_out_expected[31] = 1'bX;
end 
// expected data_block_out[ 30 ]
initial
begin
	data_block_out_expected[30] = 1'bX;
end 
// expected data_block_out[ 29 ]
initial
begin
	data_block_out_expected[29] = 1'bX;
end 
// expected data_block_out[ 28 ]
initial
begin
	data_block_out_expected[28] = 1'bX;
end 
// expected data_block_out[ 27 ]
initial
begin
	data_block_out_expected[27] = 1'bX;
end 
// expected data_block_out[ 26 ]
initial
begin
	data_block_out_expected[26] = 1'bX;
end 
// expected data_block_out[ 25 ]
initial
begin
	data_block_out_expected[25] = 1'bX;
end 
// expected data_block_out[ 24 ]
initial
begin
	data_block_out_expected[24] = 1'bX;
end 
// expected data_block_out[ 23 ]
initial
begin
	data_block_out_expected[23] = 1'bX;
end 
// expected data_block_out[ 22 ]
initial
begin
	data_block_out_expected[22] = 1'bX;
end 
// expected data_block_out[ 21 ]
initial
begin
	data_block_out_expected[21] = 1'bX;
end 
// expected data_block_out[ 20 ]
initial
begin
	data_block_out_expected[20] = 1'bX;
end 
// expected data_block_out[ 19 ]
initial
begin
	data_block_out_expected[19] = 1'bX;
end 
// expected data_block_out[ 18 ]
initial
begin
	data_block_out_expected[18] = 1'bX;
end 
// expected data_block_out[ 17 ]
initial
begin
	data_block_out_expected[17] = 1'bX;
end 
// expected data_block_out[ 16 ]
initial
begin
	data_block_out_expected[16] = 1'bX;
end 
// expected data_block_out[ 15 ]
initial
begin
	data_block_out_expected[15] = 1'bX;
end 
// expected data_block_out[ 14 ]
initial
begin
	data_block_out_expected[14] = 1'bX;
end 
// expected data_block_out[ 13 ]
initial
begin
	data_block_out_expected[13] = 1'bX;
end 
// expected data_block_out[ 12 ]
initial
begin
	data_block_out_expected[12] = 1'bX;
end 
// expected data_block_out[ 11 ]
initial
begin
	data_block_out_expected[11] = 1'bX;
end 
// expected data_block_out[ 10 ]
initial
begin
	data_block_out_expected[10] = 1'bX;
end 
// expected data_block_out[ 9 ]
initial
begin
	data_block_out_expected[9] = 1'bX;
end 
// expected data_block_out[ 8 ]
initial
begin
	data_block_out_expected[8] = 1'bX;
end 
// expected data_block_out[ 7 ]
initial
begin
	data_block_out_expected[7] = 1'bX;
end 
// expected data_block_out[ 6 ]
initial
begin
	data_block_out_expected[6] = 1'bX;
end 
// expected data_block_out[ 5 ]
initial
begin
	data_block_out_expected[5] = 1'bX;
end 
// expected data_block_out[ 4 ]
initial
begin
	data_block_out_expected[4] = 1'bX;
end 
// expected data_block_out[ 3 ]
initial
begin
	data_block_out_expected[3] = 1'bX;
end 
// expected data_block_out[ 2 ]
initial
begin
	data_block_out_expected[2] = 1'bX;
end 
// expected data_block_out[ 1 ]
initial
begin
	data_block_out_expected[1] = 1'bX;
end 
// expected data_block_out[ 0 ]
initial
begin
	data_block_out_expected[0] = 1'bX;
end 

// expected send_block_out_d
initial
begin
	send_block_out_d_expected = 1'bX;
end 
// generate trigger
always @(addressOUT_expected or addressOUT or blockReplaced_d_expected or blockReplaced_d or data_block_out_expected or data_block_out or data_enable_d_expected or data_enable_d or data_out_cpu_expected or data_out_cpu or delayReq_expected or delayReq or done_out_expected or done_out or hit_d_expected or hit_d or read_data_d_expected or read_data_d or read_tag_d_expected or read_tag_d or replaceStatusOut_expected or replaceStatusOut or send_block_out_d_expected or send_block_out_d or state_d_expected or state_d or tag_enable_d_expected or tag_enable_d or write_block_d_expected or write_block_d or write_data_d_expected or write_data_d or write_tag_d_expected or write_tag_d)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addressOUT = %b | expected blockReplaced_d = %b | expected data_block_out = %b | expected data_enable_d = %b | expected data_out_cpu = %b | expected delayReq = %b | expected done_out = %b | expected hit_d = %b | expected read_data_d = %b | expected read_tag_d = %b | expected replaceStatusOut = %b | expected send_block_out_d = %b | expected state_d = %b | expected tag_enable_d = %b | expected write_block_d = %b | expected write_data_d = %b | expected write_tag_d = %b | ",addressOUT_expected_prev,blockReplaced_d_expected_prev,data_block_out_expected_prev,data_enable_d_expected_prev,data_out_cpu_expected_prev,delayReq_expected_prev,done_out_expected_prev,hit_d_expected_prev,read_data_d_expected_prev,read_tag_d_expected_prev,replaceStatusOut_expected_prev,send_block_out_d_expected_prev,state_d_expected_prev,tag_enable_d_expected_prev,write_block_d_expected_prev,write_data_d_expected_prev,write_tag_d_expected_prev);
	$display("| real addressOUT = %b | real blockReplaced_d = %b | real data_block_out = %b | real data_enable_d = %b | real data_out_cpu = %b | real delayReq = %b | real done_out = %b | real hit_d = %b | real read_data_d = %b | real read_tag_d = %b | real replaceStatusOut = %b | real send_block_out_d = %b | real state_d = %b | real tag_enable_d = %b | real write_block_d = %b | real write_data_d = %b | real write_tag_d = %b | ",addressOUT_prev,blockReplaced_d_prev,data_block_out_prev,data_enable_d_prev,data_out_cpu_prev,delayReq_prev,done_out_prev,hit_d_prev,read_data_d_prev,read_tag_d_prev,replaceStatusOut_prev,send_block_out_d_prev,state_d_prev,tag_enable_d_prev,write_block_d_prev,write_data_d_prev,write_tag_d_prev);
`endif
	if (
		( addressOUT_expected_prev[0] !== 1'bx ) && ( addressOUT_prev[0] !== addressOUT_expected_prev[0] )
		&& ((addressOUT_expected_prev[0] !== last_addressOUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[0] = addressOUT_expected_prev[0];
	end
	if (
		( addressOUT_expected_prev[1] !== 1'bx ) && ( addressOUT_prev[1] !== addressOUT_expected_prev[1] )
		&& ((addressOUT_expected_prev[1] !== last_addressOUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[1] = addressOUT_expected_prev[1];
	end
	if (
		( addressOUT_expected_prev[2] !== 1'bx ) && ( addressOUT_prev[2] !== addressOUT_expected_prev[2] )
		&& ((addressOUT_expected_prev[2] !== last_addressOUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[2] = addressOUT_expected_prev[2];
	end
	if (
		( addressOUT_expected_prev[3] !== 1'bx ) && ( addressOUT_prev[3] !== addressOUT_expected_prev[3] )
		&& ((addressOUT_expected_prev[3] !== last_addressOUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[3] = addressOUT_expected_prev[3];
	end
	if (
		( addressOUT_expected_prev[4] !== 1'bx ) && ( addressOUT_prev[4] !== addressOUT_expected_prev[4] )
		&& ((addressOUT_expected_prev[4] !== last_addressOUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[4] = addressOUT_expected_prev[4];
	end
	if (
		( addressOUT_expected_prev[5] !== 1'bx ) && ( addressOUT_prev[5] !== addressOUT_expected_prev[5] )
		&& ((addressOUT_expected_prev[5] !== last_addressOUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[5] = addressOUT_expected_prev[5];
	end
	if (
		( addressOUT_expected_prev[6] !== 1'bx ) && ( addressOUT_prev[6] !== addressOUT_expected_prev[6] )
		&& ((addressOUT_expected_prev[6] !== last_addressOUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[6] = addressOUT_expected_prev[6];
	end
	if (
		( addressOUT_expected_prev[7] !== 1'bx ) && ( addressOUT_prev[7] !== addressOUT_expected_prev[7] )
		&& ((addressOUT_expected_prev[7] !== last_addressOUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[7] = addressOUT_expected_prev[7];
	end
	if (
		( addressOUT_expected_prev[8] !== 1'bx ) && ( addressOUT_prev[8] !== addressOUT_expected_prev[8] )
		&& ((addressOUT_expected_prev[8] !== last_addressOUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[8] = addressOUT_expected_prev[8];
	end
	if (
		( addressOUT_expected_prev[9] !== 1'bx ) && ( addressOUT_prev[9] !== addressOUT_expected_prev[9] )
		&& ((addressOUT_expected_prev[9] !== last_addressOUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[9] = addressOUT_expected_prev[9];
	end
	if (
		( addressOUT_expected_prev[10] !== 1'bx ) && ( addressOUT_prev[10] !== addressOUT_expected_prev[10] )
		&& ((addressOUT_expected_prev[10] !== last_addressOUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[10] = addressOUT_expected_prev[10];
	end
	if (
		( addressOUT_expected_prev[11] !== 1'bx ) && ( addressOUT_prev[11] !== addressOUT_expected_prev[11] )
		&& ((addressOUT_expected_prev[11] !== last_addressOUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addressOUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addressOUT_expected_prev);
		$display ("     Real value = %b", addressOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addressOUT_exp[11] = addressOUT_expected_prev[11];
	end
	if (
		( blockReplaced_d_expected_prev !== 1'bx ) && ( blockReplaced_d_prev !== blockReplaced_d_expected_prev )
		&& ((blockReplaced_d_expected_prev !== last_blockReplaced_d_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blockReplaced_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blockReplaced_d_expected_prev);
		$display ("     Real value = %b", blockReplaced_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blockReplaced_d_exp = blockReplaced_d_expected_prev;
	end
	if (
		( data_block_out_expected_prev[0] !== 1'bx ) && ( data_block_out_prev[0] !== data_block_out_expected_prev[0] )
		&& ((data_block_out_expected_prev[0] !== last_data_block_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[0] = data_block_out_expected_prev[0];
	end
	if (
		( data_block_out_expected_prev[1] !== 1'bx ) && ( data_block_out_prev[1] !== data_block_out_expected_prev[1] )
		&& ((data_block_out_expected_prev[1] !== last_data_block_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[1] = data_block_out_expected_prev[1];
	end
	if (
		( data_block_out_expected_prev[2] !== 1'bx ) && ( data_block_out_prev[2] !== data_block_out_expected_prev[2] )
		&& ((data_block_out_expected_prev[2] !== last_data_block_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[2] = data_block_out_expected_prev[2];
	end
	if (
		( data_block_out_expected_prev[3] !== 1'bx ) && ( data_block_out_prev[3] !== data_block_out_expected_prev[3] )
		&& ((data_block_out_expected_prev[3] !== last_data_block_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[3] = data_block_out_expected_prev[3];
	end
	if (
		( data_block_out_expected_prev[4] !== 1'bx ) && ( data_block_out_prev[4] !== data_block_out_expected_prev[4] )
		&& ((data_block_out_expected_prev[4] !== last_data_block_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[4] = data_block_out_expected_prev[4];
	end
	if (
		( data_block_out_expected_prev[5] !== 1'bx ) && ( data_block_out_prev[5] !== data_block_out_expected_prev[5] )
		&& ((data_block_out_expected_prev[5] !== last_data_block_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[5] = data_block_out_expected_prev[5];
	end
	if (
		( data_block_out_expected_prev[6] !== 1'bx ) && ( data_block_out_prev[6] !== data_block_out_expected_prev[6] )
		&& ((data_block_out_expected_prev[6] !== last_data_block_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[6] = data_block_out_expected_prev[6];
	end
	if (
		( data_block_out_expected_prev[7] !== 1'bx ) && ( data_block_out_prev[7] !== data_block_out_expected_prev[7] )
		&& ((data_block_out_expected_prev[7] !== last_data_block_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[7] = data_block_out_expected_prev[7];
	end
	if (
		( data_block_out_expected_prev[8] !== 1'bx ) && ( data_block_out_prev[8] !== data_block_out_expected_prev[8] )
		&& ((data_block_out_expected_prev[8] !== last_data_block_out_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[8] = data_block_out_expected_prev[8];
	end
	if (
		( data_block_out_expected_prev[9] !== 1'bx ) && ( data_block_out_prev[9] !== data_block_out_expected_prev[9] )
		&& ((data_block_out_expected_prev[9] !== last_data_block_out_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[9] = data_block_out_expected_prev[9];
	end
	if (
		( data_block_out_expected_prev[10] !== 1'bx ) && ( data_block_out_prev[10] !== data_block_out_expected_prev[10] )
		&& ((data_block_out_expected_prev[10] !== last_data_block_out_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[10] = data_block_out_expected_prev[10];
	end
	if (
		( data_block_out_expected_prev[11] !== 1'bx ) && ( data_block_out_prev[11] !== data_block_out_expected_prev[11] )
		&& ((data_block_out_expected_prev[11] !== last_data_block_out_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[11] = data_block_out_expected_prev[11];
	end
	if (
		( data_block_out_expected_prev[12] !== 1'bx ) && ( data_block_out_prev[12] !== data_block_out_expected_prev[12] )
		&& ((data_block_out_expected_prev[12] !== last_data_block_out_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[12] = data_block_out_expected_prev[12];
	end
	if (
		( data_block_out_expected_prev[13] !== 1'bx ) && ( data_block_out_prev[13] !== data_block_out_expected_prev[13] )
		&& ((data_block_out_expected_prev[13] !== last_data_block_out_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[13] = data_block_out_expected_prev[13];
	end
	if (
		( data_block_out_expected_prev[14] !== 1'bx ) && ( data_block_out_prev[14] !== data_block_out_expected_prev[14] )
		&& ((data_block_out_expected_prev[14] !== last_data_block_out_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[14] = data_block_out_expected_prev[14];
	end
	if (
		( data_block_out_expected_prev[15] !== 1'bx ) && ( data_block_out_prev[15] !== data_block_out_expected_prev[15] )
		&& ((data_block_out_expected_prev[15] !== last_data_block_out_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[15] = data_block_out_expected_prev[15];
	end
	if (
		( data_block_out_expected_prev[16] !== 1'bx ) && ( data_block_out_prev[16] !== data_block_out_expected_prev[16] )
		&& ((data_block_out_expected_prev[16] !== last_data_block_out_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[16] = data_block_out_expected_prev[16];
	end
	if (
		( data_block_out_expected_prev[17] !== 1'bx ) && ( data_block_out_prev[17] !== data_block_out_expected_prev[17] )
		&& ((data_block_out_expected_prev[17] !== last_data_block_out_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[17] = data_block_out_expected_prev[17];
	end
	if (
		( data_block_out_expected_prev[18] !== 1'bx ) && ( data_block_out_prev[18] !== data_block_out_expected_prev[18] )
		&& ((data_block_out_expected_prev[18] !== last_data_block_out_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[18] = data_block_out_expected_prev[18];
	end
	if (
		( data_block_out_expected_prev[19] !== 1'bx ) && ( data_block_out_prev[19] !== data_block_out_expected_prev[19] )
		&& ((data_block_out_expected_prev[19] !== last_data_block_out_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[19] = data_block_out_expected_prev[19];
	end
	if (
		( data_block_out_expected_prev[20] !== 1'bx ) && ( data_block_out_prev[20] !== data_block_out_expected_prev[20] )
		&& ((data_block_out_expected_prev[20] !== last_data_block_out_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[20] = data_block_out_expected_prev[20];
	end
	if (
		( data_block_out_expected_prev[21] !== 1'bx ) && ( data_block_out_prev[21] !== data_block_out_expected_prev[21] )
		&& ((data_block_out_expected_prev[21] !== last_data_block_out_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[21] = data_block_out_expected_prev[21];
	end
	if (
		( data_block_out_expected_prev[22] !== 1'bx ) && ( data_block_out_prev[22] !== data_block_out_expected_prev[22] )
		&& ((data_block_out_expected_prev[22] !== last_data_block_out_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[22] = data_block_out_expected_prev[22];
	end
	if (
		( data_block_out_expected_prev[23] !== 1'bx ) && ( data_block_out_prev[23] !== data_block_out_expected_prev[23] )
		&& ((data_block_out_expected_prev[23] !== last_data_block_out_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[23] = data_block_out_expected_prev[23];
	end
	if (
		( data_block_out_expected_prev[24] !== 1'bx ) && ( data_block_out_prev[24] !== data_block_out_expected_prev[24] )
		&& ((data_block_out_expected_prev[24] !== last_data_block_out_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[24] = data_block_out_expected_prev[24];
	end
	if (
		( data_block_out_expected_prev[25] !== 1'bx ) && ( data_block_out_prev[25] !== data_block_out_expected_prev[25] )
		&& ((data_block_out_expected_prev[25] !== last_data_block_out_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[25] = data_block_out_expected_prev[25];
	end
	if (
		( data_block_out_expected_prev[26] !== 1'bx ) && ( data_block_out_prev[26] !== data_block_out_expected_prev[26] )
		&& ((data_block_out_expected_prev[26] !== last_data_block_out_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[26] = data_block_out_expected_prev[26];
	end
	if (
		( data_block_out_expected_prev[27] !== 1'bx ) && ( data_block_out_prev[27] !== data_block_out_expected_prev[27] )
		&& ((data_block_out_expected_prev[27] !== last_data_block_out_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[27] = data_block_out_expected_prev[27];
	end
	if (
		( data_block_out_expected_prev[28] !== 1'bx ) && ( data_block_out_prev[28] !== data_block_out_expected_prev[28] )
		&& ((data_block_out_expected_prev[28] !== last_data_block_out_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[28] = data_block_out_expected_prev[28];
	end
	if (
		( data_block_out_expected_prev[29] !== 1'bx ) && ( data_block_out_prev[29] !== data_block_out_expected_prev[29] )
		&& ((data_block_out_expected_prev[29] !== last_data_block_out_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[29] = data_block_out_expected_prev[29];
	end
	if (
		( data_block_out_expected_prev[30] !== 1'bx ) && ( data_block_out_prev[30] !== data_block_out_expected_prev[30] )
		&& ((data_block_out_expected_prev[30] !== last_data_block_out_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[30] = data_block_out_expected_prev[30];
	end
	if (
		( data_block_out_expected_prev[31] !== 1'bx ) && ( data_block_out_prev[31] !== data_block_out_expected_prev[31] )
		&& ((data_block_out_expected_prev[31] !== last_data_block_out_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[31] = data_block_out_expected_prev[31];
	end
	if (
		( data_block_out_expected_prev[32] !== 1'bx ) && ( data_block_out_prev[32] !== data_block_out_expected_prev[32] )
		&& ((data_block_out_expected_prev[32] !== last_data_block_out_exp[32]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[32] = data_block_out_expected_prev[32];
	end
	if (
		( data_block_out_expected_prev[33] !== 1'bx ) && ( data_block_out_prev[33] !== data_block_out_expected_prev[33] )
		&& ((data_block_out_expected_prev[33] !== last_data_block_out_exp[33]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[33] = data_block_out_expected_prev[33];
	end
	if (
		( data_block_out_expected_prev[34] !== 1'bx ) && ( data_block_out_prev[34] !== data_block_out_expected_prev[34] )
		&& ((data_block_out_expected_prev[34] !== last_data_block_out_exp[34]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[34] = data_block_out_expected_prev[34];
	end
	if (
		( data_block_out_expected_prev[35] !== 1'bx ) && ( data_block_out_prev[35] !== data_block_out_expected_prev[35] )
		&& ((data_block_out_expected_prev[35] !== last_data_block_out_exp[35]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[35] = data_block_out_expected_prev[35];
	end
	if (
		( data_block_out_expected_prev[36] !== 1'bx ) && ( data_block_out_prev[36] !== data_block_out_expected_prev[36] )
		&& ((data_block_out_expected_prev[36] !== last_data_block_out_exp[36]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[36] = data_block_out_expected_prev[36];
	end
	if (
		( data_block_out_expected_prev[37] !== 1'bx ) && ( data_block_out_prev[37] !== data_block_out_expected_prev[37] )
		&& ((data_block_out_expected_prev[37] !== last_data_block_out_exp[37]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[37] = data_block_out_expected_prev[37];
	end
	if (
		( data_block_out_expected_prev[38] !== 1'bx ) && ( data_block_out_prev[38] !== data_block_out_expected_prev[38] )
		&& ((data_block_out_expected_prev[38] !== last_data_block_out_exp[38]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[38] = data_block_out_expected_prev[38];
	end
	if (
		( data_block_out_expected_prev[39] !== 1'bx ) && ( data_block_out_prev[39] !== data_block_out_expected_prev[39] )
		&& ((data_block_out_expected_prev[39] !== last_data_block_out_exp[39]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[39] = data_block_out_expected_prev[39];
	end
	if (
		( data_block_out_expected_prev[40] !== 1'bx ) && ( data_block_out_prev[40] !== data_block_out_expected_prev[40] )
		&& ((data_block_out_expected_prev[40] !== last_data_block_out_exp[40]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[40] = data_block_out_expected_prev[40];
	end
	if (
		( data_block_out_expected_prev[41] !== 1'bx ) && ( data_block_out_prev[41] !== data_block_out_expected_prev[41] )
		&& ((data_block_out_expected_prev[41] !== last_data_block_out_exp[41]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[41] = data_block_out_expected_prev[41];
	end
	if (
		( data_block_out_expected_prev[42] !== 1'bx ) && ( data_block_out_prev[42] !== data_block_out_expected_prev[42] )
		&& ((data_block_out_expected_prev[42] !== last_data_block_out_exp[42]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[42] = data_block_out_expected_prev[42];
	end
	if (
		( data_block_out_expected_prev[43] !== 1'bx ) && ( data_block_out_prev[43] !== data_block_out_expected_prev[43] )
		&& ((data_block_out_expected_prev[43] !== last_data_block_out_exp[43]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[43] = data_block_out_expected_prev[43];
	end
	if (
		( data_block_out_expected_prev[44] !== 1'bx ) && ( data_block_out_prev[44] !== data_block_out_expected_prev[44] )
		&& ((data_block_out_expected_prev[44] !== last_data_block_out_exp[44]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[44] = data_block_out_expected_prev[44];
	end
	if (
		( data_block_out_expected_prev[45] !== 1'bx ) && ( data_block_out_prev[45] !== data_block_out_expected_prev[45] )
		&& ((data_block_out_expected_prev[45] !== last_data_block_out_exp[45]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[45] = data_block_out_expected_prev[45];
	end
	if (
		( data_block_out_expected_prev[46] !== 1'bx ) && ( data_block_out_prev[46] !== data_block_out_expected_prev[46] )
		&& ((data_block_out_expected_prev[46] !== last_data_block_out_exp[46]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[46] = data_block_out_expected_prev[46];
	end
	if (
		( data_block_out_expected_prev[47] !== 1'bx ) && ( data_block_out_prev[47] !== data_block_out_expected_prev[47] )
		&& ((data_block_out_expected_prev[47] !== last_data_block_out_exp[47]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[47] = data_block_out_expected_prev[47];
	end
	if (
		( data_block_out_expected_prev[48] !== 1'bx ) && ( data_block_out_prev[48] !== data_block_out_expected_prev[48] )
		&& ((data_block_out_expected_prev[48] !== last_data_block_out_exp[48]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[48] = data_block_out_expected_prev[48];
	end
	if (
		( data_block_out_expected_prev[49] !== 1'bx ) && ( data_block_out_prev[49] !== data_block_out_expected_prev[49] )
		&& ((data_block_out_expected_prev[49] !== last_data_block_out_exp[49]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[49] = data_block_out_expected_prev[49];
	end
	if (
		( data_block_out_expected_prev[50] !== 1'bx ) && ( data_block_out_prev[50] !== data_block_out_expected_prev[50] )
		&& ((data_block_out_expected_prev[50] !== last_data_block_out_exp[50]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[50] = data_block_out_expected_prev[50];
	end
	if (
		( data_block_out_expected_prev[51] !== 1'bx ) && ( data_block_out_prev[51] !== data_block_out_expected_prev[51] )
		&& ((data_block_out_expected_prev[51] !== last_data_block_out_exp[51]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[51] = data_block_out_expected_prev[51];
	end
	if (
		( data_block_out_expected_prev[52] !== 1'bx ) && ( data_block_out_prev[52] !== data_block_out_expected_prev[52] )
		&& ((data_block_out_expected_prev[52] !== last_data_block_out_exp[52]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[52] = data_block_out_expected_prev[52];
	end
	if (
		( data_block_out_expected_prev[53] !== 1'bx ) && ( data_block_out_prev[53] !== data_block_out_expected_prev[53] )
		&& ((data_block_out_expected_prev[53] !== last_data_block_out_exp[53]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[53] = data_block_out_expected_prev[53];
	end
	if (
		( data_block_out_expected_prev[54] !== 1'bx ) && ( data_block_out_prev[54] !== data_block_out_expected_prev[54] )
		&& ((data_block_out_expected_prev[54] !== last_data_block_out_exp[54]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[54] = data_block_out_expected_prev[54];
	end
	if (
		( data_block_out_expected_prev[55] !== 1'bx ) && ( data_block_out_prev[55] !== data_block_out_expected_prev[55] )
		&& ((data_block_out_expected_prev[55] !== last_data_block_out_exp[55]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[55] = data_block_out_expected_prev[55];
	end
	if (
		( data_block_out_expected_prev[56] !== 1'bx ) && ( data_block_out_prev[56] !== data_block_out_expected_prev[56] )
		&& ((data_block_out_expected_prev[56] !== last_data_block_out_exp[56]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[56] = data_block_out_expected_prev[56];
	end
	if (
		( data_block_out_expected_prev[57] !== 1'bx ) && ( data_block_out_prev[57] !== data_block_out_expected_prev[57] )
		&& ((data_block_out_expected_prev[57] !== last_data_block_out_exp[57]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[57] = data_block_out_expected_prev[57];
	end
	if (
		( data_block_out_expected_prev[58] !== 1'bx ) && ( data_block_out_prev[58] !== data_block_out_expected_prev[58] )
		&& ((data_block_out_expected_prev[58] !== last_data_block_out_exp[58]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[58] = data_block_out_expected_prev[58];
	end
	if (
		( data_block_out_expected_prev[59] !== 1'bx ) && ( data_block_out_prev[59] !== data_block_out_expected_prev[59] )
		&& ((data_block_out_expected_prev[59] !== last_data_block_out_exp[59]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[59] = data_block_out_expected_prev[59];
	end
	if (
		( data_block_out_expected_prev[60] !== 1'bx ) && ( data_block_out_prev[60] !== data_block_out_expected_prev[60] )
		&& ((data_block_out_expected_prev[60] !== last_data_block_out_exp[60]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[60] = data_block_out_expected_prev[60];
	end
	if (
		( data_block_out_expected_prev[61] !== 1'bx ) && ( data_block_out_prev[61] !== data_block_out_expected_prev[61] )
		&& ((data_block_out_expected_prev[61] !== last_data_block_out_exp[61]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[61] = data_block_out_expected_prev[61];
	end
	if (
		( data_block_out_expected_prev[62] !== 1'bx ) && ( data_block_out_prev[62] !== data_block_out_expected_prev[62] )
		&& ((data_block_out_expected_prev[62] !== last_data_block_out_exp[62]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[62] = data_block_out_expected_prev[62];
	end
	if (
		( data_block_out_expected_prev[63] !== 1'bx ) && ( data_block_out_prev[63] !== data_block_out_expected_prev[63] )
		&& ((data_block_out_expected_prev[63] !== last_data_block_out_exp[63]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_block_out[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_block_out_expected_prev);
		$display ("     Real value = %b", data_block_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_block_out_exp[63] = data_block_out_expected_prev[63];
	end
	if (
		( data_enable_d_expected_prev !== 1'bx ) && ( data_enable_d_prev !== data_enable_d_expected_prev )
		&& ((data_enable_d_expected_prev !== last_data_enable_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_enable_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_enable_d_expected_prev);
		$display ("     Real value = %b", data_enable_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_enable_d_exp = data_enable_d_expected_prev;
	end
	if (
		( data_out_cpu_expected_prev[0] !== 1'bx ) && ( data_out_cpu_prev[0] !== data_out_cpu_expected_prev[0] )
		&& ((data_out_cpu_expected_prev[0] !== last_data_out_cpu_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[0] = data_out_cpu_expected_prev[0];
	end
	if (
		( data_out_cpu_expected_prev[1] !== 1'bx ) && ( data_out_cpu_prev[1] !== data_out_cpu_expected_prev[1] )
		&& ((data_out_cpu_expected_prev[1] !== last_data_out_cpu_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[1] = data_out_cpu_expected_prev[1];
	end
	if (
		( data_out_cpu_expected_prev[2] !== 1'bx ) && ( data_out_cpu_prev[2] !== data_out_cpu_expected_prev[2] )
		&& ((data_out_cpu_expected_prev[2] !== last_data_out_cpu_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[2] = data_out_cpu_expected_prev[2];
	end
	if (
		( data_out_cpu_expected_prev[3] !== 1'bx ) && ( data_out_cpu_prev[3] !== data_out_cpu_expected_prev[3] )
		&& ((data_out_cpu_expected_prev[3] !== last_data_out_cpu_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[3] = data_out_cpu_expected_prev[3];
	end
	if (
		( data_out_cpu_expected_prev[4] !== 1'bx ) && ( data_out_cpu_prev[4] !== data_out_cpu_expected_prev[4] )
		&& ((data_out_cpu_expected_prev[4] !== last_data_out_cpu_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[4] = data_out_cpu_expected_prev[4];
	end
	if (
		( data_out_cpu_expected_prev[5] !== 1'bx ) && ( data_out_cpu_prev[5] !== data_out_cpu_expected_prev[5] )
		&& ((data_out_cpu_expected_prev[5] !== last_data_out_cpu_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[5] = data_out_cpu_expected_prev[5];
	end
	if (
		( data_out_cpu_expected_prev[6] !== 1'bx ) && ( data_out_cpu_prev[6] !== data_out_cpu_expected_prev[6] )
		&& ((data_out_cpu_expected_prev[6] !== last_data_out_cpu_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[6] = data_out_cpu_expected_prev[6];
	end
	if (
		( data_out_cpu_expected_prev[7] !== 1'bx ) && ( data_out_cpu_prev[7] !== data_out_cpu_expected_prev[7] )
		&& ((data_out_cpu_expected_prev[7] !== last_data_out_cpu_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[7] = data_out_cpu_expected_prev[7];
	end
	if (
		( data_out_cpu_expected_prev[8] !== 1'bx ) && ( data_out_cpu_prev[8] !== data_out_cpu_expected_prev[8] )
		&& ((data_out_cpu_expected_prev[8] !== last_data_out_cpu_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[8] = data_out_cpu_expected_prev[8];
	end
	if (
		( data_out_cpu_expected_prev[9] !== 1'bx ) && ( data_out_cpu_prev[9] !== data_out_cpu_expected_prev[9] )
		&& ((data_out_cpu_expected_prev[9] !== last_data_out_cpu_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[9] = data_out_cpu_expected_prev[9];
	end
	if (
		( data_out_cpu_expected_prev[10] !== 1'bx ) && ( data_out_cpu_prev[10] !== data_out_cpu_expected_prev[10] )
		&& ((data_out_cpu_expected_prev[10] !== last_data_out_cpu_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[10] = data_out_cpu_expected_prev[10];
	end
	if (
		( data_out_cpu_expected_prev[11] !== 1'bx ) && ( data_out_cpu_prev[11] !== data_out_cpu_expected_prev[11] )
		&& ((data_out_cpu_expected_prev[11] !== last_data_out_cpu_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[11] = data_out_cpu_expected_prev[11];
	end
	if (
		( data_out_cpu_expected_prev[12] !== 1'bx ) && ( data_out_cpu_prev[12] !== data_out_cpu_expected_prev[12] )
		&& ((data_out_cpu_expected_prev[12] !== last_data_out_cpu_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[12] = data_out_cpu_expected_prev[12];
	end
	if (
		( data_out_cpu_expected_prev[13] !== 1'bx ) && ( data_out_cpu_prev[13] !== data_out_cpu_expected_prev[13] )
		&& ((data_out_cpu_expected_prev[13] !== last_data_out_cpu_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[13] = data_out_cpu_expected_prev[13];
	end
	if (
		( data_out_cpu_expected_prev[14] !== 1'bx ) && ( data_out_cpu_prev[14] !== data_out_cpu_expected_prev[14] )
		&& ((data_out_cpu_expected_prev[14] !== last_data_out_cpu_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[14] = data_out_cpu_expected_prev[14];
	end
	if (
		( data_out_cpu_expected_prev[15] !== 1'bx ) && ( data_out_cpu_prev[15] !== data_out_cpu_expected_prev[15] )
		&& ((data_out_cpu_expected_prev[15] !== last_data_out_cpu_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_cpu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_cpu_expected_prev);
		$display ("     Real value = %b", data_out_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_cpu_exp[15] = data_out_cpu_expected_prev[15];
	end
	if (
		( delayReq_expected_prev !== 1'bx ) && ( delayReq_prev !== delayReq_expected_prev )
		&& ((delayReq_expected_prev !== last_delayReq_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port delayReq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", delayReq_expected_prev);
		$display ("     Real value = %b", delayReq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_delayReq_exp = delayReq_expected_prev;
	end
	if (
		( done_out_expected_prev !== 1'bx ) && ( done_out_prev !== done_out_expected_prev )
		&& ((done_out_expected_prev !== last_done_out_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_out_expected_prev);
		$display ("     Real value = %b", done_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_done_out_exp = done_out_expected_prev;
	end
	if (
		( hit_d_expected_prev !== 1'bx ) && ( hit_d_prev !== hit_d_expected_prev )
		&& ((hit_d_expected_prev !== last_hit_d_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hit_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hit_d_expected_prev);
		$display ("     Real value = %b", hit_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hit_d_exp = hit_d_expected_prev;
	end
	if (
		( read_data_d_expected_prev !== 1'bx ) && ( read_data_d_prev !== read_data_d_expected_prev )
		&& ((read_data_d_expected_prev !== last_read_data_d_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_d_expected_prev);
		$display ("     Real value = %b", read_data_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_read_data_d_exp = read_data_d_expected_prev;
	end
	if (
		( read_tag_d_expected_prev !== 1'bx ) && ( read_tag_d_prev !== read_tag_d_expected_prev )
		&& ((read_tag_d_expected_prev !== last_read_tag_d_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_tag_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_tag_d_expected_prev);
		$display ("     Real value = %b", read_tag_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_read_tag_d_exp = read_tag_d_expected_prev;
	end
	if (
		( replaceStatusOut_expected_prev !== 1'bx ) && ( replaceStatusOut_prev !== replaceStatusOut_expected_prev )
		&& ((replaceStatusOut_expected_prev !== last_replaceStatusOut_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port replaceStatusOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", replaceStatusOut_expected_prev);
		$display ("     Real value = %b", replaceStatusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_replaceStatusOut_exp = replaceStatusOut_expected_prev;
	end
	if (
		( send_block_out_d_expected_prev !== 1'bx ) && ( send_block_out_d_prev !== send_block_out_d_expected_prev )
		&& ((send_block_out_d_expected_prev !== last_send_block_out_d_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port send_block_out_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", send_block_out_d_expected_prev);
		$display ("     Real value = %b", send_block_out_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_send_block_out_d_exp = send_block_out_d_expected_prev;
	end
	if (
		( state_d_expected_prev[0] !== 1'bx ) && ( state_d_prev[0] !== state_d_expected_prev[0] )
		&& ((state_d_expected_prev[0] !== last_state_d_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_d_exp[0] = state_d_expected_prev[0];
	end
	if (
		( state_d_expected_prev[1] !== 1'bx ) && ( state_d_prev[1] !== state_d_expected_prev[1] )
		&& ((state_d_expected_prev[1] !== last_state_d_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_d_exp[1] = state_d_expected_prev[1];
	end
	if (
		( state_d_expected_prev[2] !== 1'bx ) && ( state_d_prev[2] !== state_d_expected_prev[2] )
		&& ((state_d_expected_prev[2] !== last_state_d_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_d_exp[2] = state_d_expected_prev[2];
	end
	if (
		( state_d_expected_prev[3] !== 1'bx ) && ( state_d_prev[3] !== state_d_expected_prev[3] )
		&& ((state_d_expected_prev[3] !== last_state_d_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_d_expected_prev);
		$display ("     Real value = %b", state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_state_d_exp[3] = state_d_expected_prev[3];
	end
	if (
		( tag_enable_d_expected_prev !== 1'bx ) && ( tag_enable_d_prev !== tag_enable_d_expected_prev )
		&& ((tag_enable_d_expected_prev !== last_tag_enable_d_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tag_enable_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tag_enable_d_expected_prev);
		$display ("     Real value = %b", tag_enable_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tag_enable_d_exp = tag_enable_d_expected_prev;
	end
	if (
		( write_block_d_expected_prev !== 1'bx ) && ( write_block_d_prev !== write_block_d_expected_prev )
		&& ((write_block_d_expected_prev !== last_write_block_d_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_block_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_block_d_expected_prev);
		$display ("     Real value = %b", write_block_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_write_block_d_exp = write_block_d_expected_prev;
	end
	if (
		( write_data_d_expected_prev !== 1'bx ) && ( write_data_d_prev !== write_data_d_expected_prev )
		&& ((write_data_d_expected_prev !== last_write_data_d_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_d_expected_prev);
		$display ("     Real value = %b", write_data_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_d_exp = write_data_d_expected_prev;
	end
	if (
		( write_tag_d_expected_prev !== 1'bx ) && ( write_tag_d_prev !== write_tag_d_expected_prev )
		&& ((write_tag_d_expected_prev !== last_write_tag_d_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_tag_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_tag_d_expected_prev);
		$display ("     Real value = %b", write_tag_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_write_tag_d_exp = write_tag_d_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CacheController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] address_block_in;
reg [11:0] addressIN;
reg clock;
reg clock_en;
reg [63:0] data_block_in;
reg [15:0] data_in;
reg MreIn;
reg MweIn;
reg replaceStatusIn;
reg reset;
// wires                                               
wire [11:0] addressOUT;
wire blockReplaced_d;
wire [63:0] data_block_out;
wire data_enable_d;
wire [15:0] data_out_cpu;
wire delayReq;
wire done_out;
wire hit_d;
wire read_data_d;
wire read_tag_d;
wire replaceStatusOut;
wire send_block_out_d;
wire [3:0] state_d;
wire tag_enable_d;
wire write_block_d;
wire write_data_d;
wire write_tag_d;

wire sampler;                             

// assign statements (if any)                          
CacheController i1 (
// port map - connection between master ports and signals/registers   
	.address_block_in(address_block_in),
	.addressIN(addressIN),
	.addressOUT(addressOUT),
	.blockReplaced_d(blockReplaced_d),
	.clock(clock),
	.clock_en(clock_en),
	.data_block_in(data_block_in),
	.data_block_out(data_block_out),
	.data_enable_d(data_enable_d),
	.data_in(data_in),
	.data_out_cpu(data_out_cpu),
	.delayReq(delayReq),
	.done_out(done_out),
	.hit_d(hit_d),
	.MreIn(MreIn),
	.MweIn(MweIn),
	.read_data_d(read_data_d),
	.read_tag_d(read_tag_d),
	.replaceStatusIn(replaceStatusIn),
	.replaceStatusOut(replaceStatusOut),
	.reset(reset),
	.send_block_out_d(send_block_out_d),
	.state_d(state_d),
	.tag_enable_d(tag_enable_d),
	.write_block_d(write_block_d),
	.write_data_d(write_data_d),
	.write_tag_d(write_tag_d)
);
// address_block_in[ 11 ]
initial
begin
	address_block_in[11] = 1'b0;
end 
// address_block_in[ 10 ]
initial
begin
	address_block_in[10] = 1'b0;
end 
// address_block_in[ 9 ]
initial
begin
	address_block_in[9] = 1'b0;
end 
// address_block_in[ 8 ]
initial
begin
	address_block_in[8] = 1'b0;
end 
// address_block_in[ 7 ]
initial
begin
	address_block_in[7] = 1'b0;
end 
// address_block_in[ 6 ]
initial
begin
	address_block_in[6] = 1'b0;
end 
// address_block_in[ 5 ]
initial
begin
	address_block_in[5] = 1'b0;
end 
// address_block_in[ 4 ]
initial
begin
	address_block_in[4] = 1'b0;
end 
// address_block_in[ 3 ]
initial
begin
	address_block_in[3] = 1'b0;
end 
// address_block_in[ 2 ]
initial
begin
	address_block_in[2] = 1'b0;
end 
// address_block_in[ 1 ]
initial
begin
	address_block_in[1] = 1'b0;
end 
// address_block_in[ 0 ]
initial
begin
	address_block_in[0] = 1'b0;
end 
// addressIN[ 11 ]
initial
begin
	addressIN[11] = 1'b0;
	addressIN[11] = #990000 1'b1;
	addressIN[11] = #450000 1'b0;
end 
// addressIN[ 10 ]
initial
begin
	addressIN[10] = 1'b0;
end 
// addressIN[ 9 ]
initial
begin
	addressIN[9] = 1'b0;
end 
// addressIN[ 8 ]
initial
begin
	addressIN[8] = 1'b0;
end 
// addressIN[ 7 ]
initial
begin
	addressIN[7] = 1'b0;
end 
// addressIN[ 6 ]
initial
begin
	addressIN[6] = 1'b0;
end 
// addressIN[ 5 ]
initial
begin
	addressIN[5] = 1'b0;
	addressIN[5] = #490000 1'b1;
	addressIN[5] = #950000 1'b0;
end 
// addressIN[ 4 ]
initial
begin
	addressIN[4] = 1'b0;
end 
// addressIN[ 3 ]
initial
begin
	addressIN[3] = 1'b0;
end 
// addressIN[ 2 ]
initial
begin
	addressIN[2] = 1'b1;
	addressIN[2] = #1440000 1'b0;
end 
// addressIN[ 1 ]
initial
begin
	addressIN[1] = 1'b0;
end 
// addressIN[ 0 ]
initial
begin
	addressIN[0] = 1'b1;
	addressIN[0] = #1440000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// clock_en
initial
begin
	clock_en = 1'b0;
	clock_en = #10000 1'b1;
	clock_en = #160000 1'b0;
	clock_en = #60000 1'b1;
	clock_en = #120000 1'b0;
	clock_en = #140000 1'b1;
	clock_en = #340000 1'b0;
	clock_en = #200000 1'b1;
	clock_en = #560000 1'b0;
end 
// data_block_in[ 63 ]
initial
begin
	data_block_in[63] = 1'b1;
	data_block_in[63] = #1980000 1'b0;
end 
// data_block_in[ 62 ]
initial
begin
	data_block_in[62] = 1'b0;
end 
// data_block_in[ 61 ]
initial
begin
	data_block_in[61] = 1'b1;
	data_block_in[61] = #1980000 1'b0;
end 
// data_block_in[ 60 ]
initial
begin
	data_block_in[60] = 1'b0;
end 
// data_block_in[ 59 ]
initial
begin
	data_block_in[59] = 1'b1;
	data_block_in[59] = #1980000 1'b0;
end 
// data_block_in[ 58 ]
initial
begin
	data_block_in[58] = 1'b0;
end 
// data_block_in[ 57 ]
initial
begin
	data_block_in[57] = 1'b1;
	data_block_in[57] = #1980000 1'b0;
end 
// data_block_in[ 56 ]
initial
begin
	data_block_in[56] = 1'b0;
end 
// data_block_in[ 55 ]
initial
begin
	data_block_in[55] = 1'b1;
	data_block_in[55] = #1980000 1'b0;
end 
// data_block_in[ 54 ]
initial
begin
	data_block_in[54] = 1'b0;
end 
// data_block_in[ 53 ]
initial
begin
	data_block_in[53] = 1'b1;
	data_block_in[53] = #1980000 1'b0;
end 
// data_block_in[ 52 ]
initial
begin
	data_block_in[52] = 1'b0;
end 
// data_block_in[ 51 ]
initial
begin
	data_block_in[51] = 1'b1;
	data_block_in[51] = #990000 1'b0;
end 
// data_block_in[ 50 ]
initial
begin
	data_block_in[50] = 1'b0;
end 
// data_block_in[ 49 ]
initial
begin
	data_block_in[49] = 1'b1;
	data_block_in[49] = #990000 1'b0;
end 
// data_block_in[ 48 ]
initial
begin
	data_block_in[48] = 1'b0;
	data_block_in[48] = #990000 1'b1;
	data_block_in[48] = #990000 1'b0;
end 
// data_block_in[ 47 ]
initial
begin
	data_block_in[47] = 1'b1;
	data_block_in[47] = #1980000 1'b0;
end 
// data_block_in[ 46 ]
initial
begin
	data_block_in[46] = 1'b0;
end 
// data_block_in[ 45 ]
initial
begin
	data_block_in[45] = 1'b1;
	data_block_in[45] = #1980000 1'b0;
end 
// data_block_in[ 44 ]
initial
begin
	data_block_in[44] = 1'b1;
	data_block_in[44] = #1980000 1'b0;
end 
// data_block_in[ 43 ]
initial
begin
	data_block_in[43] = 1'b1;
	data_block_in[43] = #1980000 1'b0;
end 
// data_block_in[ 42 ]
initial
begin
	data_block_in[42] = 1'b0;
end 
// data_block_in[ 41 ]
initial
begin
	data_block_in[41] = 1'b1;
	data_block_in[41] = #1980000 1'b0;
end 
// data_block_in[ 40 ]
initial
begin
	data_block_in[40] = 1'b1;
	data_block_in[40] = #1980000 1'b0;
end 
// data_block_in[ 39 ]
initial
begin
	data_block_in[39] = 1'b1;
	data_block_in[39] = #1980000 1'b0;
end 
// data_block_in[ 38 ]
initial
begin
	data_block_in[38] = 1'b0;
end 
// data_block_in[ 37 ]
initial
begin
	data_block_in[37] = 1'b1;
	data_block_in[37] = #1980000 1'b0;
end 
// data_block_in[ 36 ]
initial
begin
	data_block_in[36] = 1'b1;
	data_block_in[36] = #1980000 1'b0;
end 
// data_block_in[ 35 ]
initial
begin
	data_block_in[35] = 1'b1;
	data_block_in[35] = #990000 1'b0;
end 
// data_block_in[ 34 ]
initial
begin
	data_block_in[34] = 1'b0;
end 
// data_block_in[ 33 ]
initial
begin
	data_block_in[33] = 1'b1;
	data_block_in[33] = #990000 1'b0;
end 
// data_block_in[ 32 ]
initial
begin
	data_block_in[32] = 1'b1;
	data_block_in[32] = #1980000 1'b0;
end 
// data_block_in[ 31 ]
initial
begin
	data_block_in[31] = 1'b1;
	data_block_in[31] = #1980000 1'b0;
end 
// data_block_in[ 30 ]
initial
begin
	data_block_in[30] = 1'b1;
	data_block_in[30] = #1980000 1'b0;
end 
// data_block_in[ 29 ]
initial
begin
	data_block_in[29] = 1'b0;
end 
// data_block_in[ 28 ]
initial
begin
	data_block_in[28] = 1'b0;
end 
// data_block_in[ 27 ]
initial
begin
	data_block_in[27] = 1'b1;
	data_block_in[27] = #1980000 1'b0;
end 
// data_block_in[ 26 ]
initial
begin
	data_block_in[26] = 1'b1;
	data_block_in[26] = #1980000 1'b0;
end 
// data_block_in[ 25 ]
initial
begin
	data_block_in[25] = 1'b0;
end 
// data_block_in[ 24 ]
initial
begin
	data_block_in[24] = 1'b0;
end 
// data_block_in[ 23 ]
initial
begin
	data_block_in[23] = 1'b1;
	data_block_in[23] = #1980000 1'b0;
end 
// data_block_in[ 22 ]
initial
begin
	data_block_in[22] = 1'b1;
	data_block_in[22] = #1980000 1'b0;
end 
// data_block_in[ 21 ]
initial
begin
	data_block_in[21] = 1'b0;
end 
// data_block_in[ 20 ]
initial
begin
	data_block_in[20] = 1'b0;
end 
// data_block_in[ 19 ]
initial
begin
	data_block_in[19] = 1'b1;
	data_block_in[19] = #990000 1'b0;
end 
// data_block_in[ 18 ]
initial
begin
	data_block_in[18] = 1'b1;
	data_block_in[18] = #990000 1'b0;
end 
// data_block_in[ 17 ]
initial
begin
	data_block_in[17] = 1'b0;
end 
// data_block_in[ 16 ]
initial
begin
	data_block_in[16] = 1'b0;
	data_block_in[16] = #990000 1'b1;
	data_block_in[16] = #990000 1'b0;
end 
// data_block_in[ 15 ]
initial
begin
	data_block_in[15] = 1'b1;
	data_block_in[15] = #1980000 1'b0;
end 
// data_block_in[ 14 ]
initial
begin
	data_block_in[14] = 1'b1;
	data_block_in[14] = #1980000 1'b0;
end 
// data_block_in[ 13 ]
initial
begin
	data_block_in[13] = 1'b0;
end 
// data_block_in[ 12 ]
initial
begin
	data_block_in[12] = 1'b1;
	data_block_in[12] = #1980000 1'b0;
end 
// data_block_in[ 11 ]
initial
begin
	data_block_in[11] = 1'b1;
	data_block_in[11] = #1980000 1'b0;
end 
// data_block_in[ 10 ]
initial
begin
	data_block_in[10] = 1'b1;
	data_block_in[10] = #1980000 1'b0;
end 
// data_block_in[ 9 ]
initial
begin
	data_block_in[9] = 1'b0;
end 
// data_block_in[ 8 ]
initial
begin
	data_block_in[8] = 1'b1;
	data_block_in[8] = #1980000 1'b0;
end 
// data_block_in[ 7 ]
initial
begin
	data_block_in[7] = 1'b1;
	data_block_in[7] = #1980000 1'b0;
end 
// data_block_in[ 6 ]
initial
begin
	data_block_in[6] = 1'b1;
	data_block_in[6] = #1980000 1'b0;
end 
// data_block_in[ 5 ]
initial
begin
	data_block_in[5] = 1'b0;
end 
// data_block_in[ 4 ]
initial
begin
	data_block_in[4] = 1'b1;
	data_block_in[4] = #1980000 1'b0;
end 
// data_block_in[ 3 ]
initial
begin
	data_block_in[3] = 1'b1;
	data_block_in[3] = #990000 1'b0;
end 
// data_block_in[ 2 ]
initial
begin
	data_block_in[2] = 1'b1;
	data_block_in[2] = #990000 1'b0;
end 
// data_block_in[ 1 ]
initial
begin
	data_block_in[1] = 1'b0;
end 
// data_block_in[ 0 ]
initial
begin
	data_block_in[0] = 1'b1;
	data_block_in[0] = #1980000 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
	data_in[15] = #1440000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b1;
	data_in[14] = #990000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b1;
	data_in[13] = #1440000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
	data_in[12] = #990000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b1;
	data_in[11] = #1440000 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b1;
	data_in[10] = #990000 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b1;
	data_in[9] = #1440000 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
	data_in[8] = #990000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
	data_in[7] = #1440000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
	data_in[6] = #990000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #1440000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #990000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
	data_in[3] = #1440000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #990000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
	data_in[1] = #1440000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #990000 1'b0;
end 

// MreIn
initial
begin
	MreIn = 1'b0;
	MreIn = #250000 1'b1;
	MreIn = #60000 1'b0;
	MreIn = #210000 1'b1;
	MreIn = #320000 1'b0;
	MreIn = #330000 1'b1;
	MreIn = #60000 1'b0;
end 

// MweIn
initial
begin
	MweIn = 1'b0;
	MweIn = #90000 1'b1;
	MweIn = #60000 1'b0;
	MweIn = #900000 1'b1;
	MweIn = #60000 1'b0;
end 

// replaceStatusIn
initial
begin
	replaceStatusIn = 1'b0;
	replaceStatusIn = #540000 1'b1;
	replaceStatusIn = #330000 1'b0;
	replaceStatusIn = #320000 1'b1;
	replaceStatusIn = #250000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

CacheController_vlg_sample_tst tb_sample (
	.address_block_in(address_block_in),
	.addressIN(addressIN),
	.clock(clock),
	.clock_en(clock_en),
	.data_block_in(data_block_in),
	.data_in(data_in),
	.MreIn(MreIn),
	.MweIn(MweIn),
	.replaceStatusIn(replaceStatusIn),
	.reset(reset),
	.sampler_tx(sampler)
);

CacheController_vlg_check_tst tb_out(
	.addressOUT(addressOUT),
	.blockReplaced_d(blockReplaced_d),
	.data_block_out(data_block_out),
	.data_enable_d(data_enable_d),
	.data_out_cpu(data_out_cpu),
	.delayReq(delayReq),
	.done_out(done_out),
	.hit_d(hit_d),
	.read_data_d(read_data_d),
	.read_tag_d(read_tag_d),
	.replaceStatusOut(replaceStatusOut),
	.send_block_out_d(send_block_out_d),
	.state_d(state_d),
	.tag_enable_d(tag_enable_d),
	.write_block_d(write_block_d),
	.write_data_d(write_data_d),
	.write_tag_d(write_tag_d),
	.sampler_rx(sampler)
);
endmodule

